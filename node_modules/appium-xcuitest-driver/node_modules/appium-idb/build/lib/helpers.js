"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IDB_EXECUTABLE = exports.IDB_COMPANION_EXECUTABLE = exports.DEFAULT_IDB_PORT = exports.DEFAULT_IDB_EXEC_TIMEOUT = exports.DEFAULT_COMPANION_PORT = exports.DEFAULT_COMPANION_GRPC_PORT = void 0;
exports.convertToIDBEnv = convertToIDBEnv;
exports.fixOutputToArray = fixOutputToArray;
exports.getPids = getPids;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
const DEFAULT_IDB_EXEC_TIMEOUT = 20000;
exports.DEFAULT_IDB_EXEC_TIMEOUT = DEFAULT_IDB_EXEC_TIMEOUT;
const DEFAULT_IDB_PORT = 9889;
exports.DEFAULT_IDB_PORT = DEFAULT_IDB_PORT;
const IDB_EXECUTABLE = 'idb';
exports.IDB_EXECUTABLE = IDB_EXECUTABLE;
const IDB_COMPANION_EXECUTABLE = 'idb_companion';
exports.IDB_COMPANION_EXECUTABLE = IDB_COMPANION_EXECUTABLE;
const DEFAULT_COMPANION_PORT = 10880;
exports.DEFAULT_COMPANION_PORT = DEFAULT_COMPANION_PORT;
const DEFAULT_COMPANION_GRPC_PORT = 10882;
exports.DEFAULT_COMPANION_GRPC_PORT = DEFAULT_COMPANION_GRPC_PORT;
const IDB_ENV_PREFIX = 'IDB_';
async function getPids(pattern, opts = {}) {
  const {
    multi = true,
    ignoreCase = true
  } = opts;
  const args = [`-${ignoreCase ? 'i' : ''}f${multi ? '' : 'n'}`, pattern];
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', args);
    const result = stdout.split('\n').filter(Number).map(x => `${x}`);
    return multi ? result : _lodash.default.isEmpty(result) ? [] : _lodash.default.first(result);
  } catch (err) {
    return [];
  }
}
function convertToIDBEnv(env) {
  if (!_lodash.default.isPlainObject(env) || _lodash.default.isEmpty(env)) {
    return null;
  }
  return _lodash.default.reduce(env, (result, value, key) => {
    result[IDB_ENV_PREFIX + key] = value;
    return result;
  }, {});
}
function fixOutputToArray(output) {
  if (!_lodash.default.trim(output)) {
    return [];
  }
  return output.split('\n').reduce((acc, x) => {
    try {
      return [...acc, JSON.parse(x)];
    } catch (e) {
      return acc;
    }
  }, []);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX0lEQl9FWEVDX1RJTUVPVVQiLCJERUZBVUxUX0lEQl9QT1JUIiwiSURCX0VYRUNVVEFCTEUiLCJJREJfQ09NUEFOSU9OX0VYRUNVVEFCTEUiLCJERUZBVUxUX0NPTVBBTklPTl9QT1JUIiwiREVGQVVMVF9DT01QQU5JT05fR1JQQ19QT1JUIiwiSURCX0VOVl9QUkVGSVgiLCJnZXRQaWRzIiwicGF0dGVybiIsIm9wdHMiLCJtdWx0aSIsImlnbm9yZUNhc2UiLCJhcmdzIiwic3Rkb3V0IiwiZXhlYyIsInJlc3VsdCIsInNwbGl0IiwiZmlsdGVyIiwiTnVtYmVyIiwibWFwIiwieCIsIl8iLCJpc0VtcHR5IiwiZmlyc3QiLCJlcnIiLCJjb252ZXJ0VG9JREJFbnYiLCJlbnYiLCJpc1BsYWluT2JqZWN0IiwicmVkdWNlIiwidmFsdWUiLCJrZXkiLCJmaXhPdXRwdXRUb0FycmF5Iiwib3V0cHV0IiwidHJpbSIsImFjYyIsIkpTT04iLCJwYXJzZSIsImUiXSwic291cmNlcyI6WyIuLi8uLi9saWIvaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5cbmNvbnN0IERFRkFVTFRfSURCX0VYRUNfVElNRU9VVCA9IDIwMDAwOyAvLyBpbiBtaWxsaXNlY29uZHNcbmNvbnN0IERFRkFVTFRfSURCX1BPUlQgPSA5ODg5O1xuY29uc3QgSURCX0VYRUNVVEFCTEUgPSAnaWRiJztcbmNvbnN0IElEQl9DT01QQU5JT05fRVhFQ1VUQUJMRSA9ICdpZGJfY29tcGFuaW9uJztcbmNvbnN0IERFRkFVTFRfQ09NUEFOSU9OX1BPUlQgPSAxMDg4MDtcbmNvbnN0IERFRkFVTFRfQ09NUEFOSU9OX0dSUENfUE9SVCA9IDEwODgyO1xuY29uc3QgSURCX0VOVl9QUkVGSVggPSAnSURCXyc7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUGlkTG9va3VwT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IG11bHRpIFt0cnVlXSAtIFNldCBpdCB0byB0cnVlIGlmIG11bHRpcGxlIG1hdGNoaW5nXG4gKiBwaWRzIGFyZSBleHBlY3RlZCB0byBiZSBmb3VuZC4gT25seSB0aGUgbmV3ZXN0IHByb2Nlc3MgaWQgaXMgZ29pbmcgdG9cbiAqIGJlIHJldHVybmVkIGluc3RlYWRcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IGlnbm9yZUNhc2UgW3RydWVdIC0gU2V0IGl0IHRvIGZhbHNlIHRvIG1ha2UgdGhlIHNlYXJjaFxuICogY2FzZS1zZW5zaXRpdmVcbiAqL1xuXG4vKipcbiAqIEdldCB0aGUgcHJvY2VzcyBpZCBvZiB0aGUgbW9zdCByZWNlbnQgcnVubmluZyBhcHBsaWNhdGlvblxuICogaGF2aW5nIHRoZSBwYXJ0aWN1bGFyIGNvbW1hbmQgbGluZSBwYXR0ZXJuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gcGdyZXAtY29tcGF0aWJsZSBzZWFyY2ggcGF0dGVybi5cbiAqIEBwYXJhbSB7P1BpZExvb2t1cE9wdGlvbnN9IG9wdHNcbiAqIEByZXR1cm4ge0FycmF5PHN0cmluZz59IEFuIGFycmF5IG9mIHByb2Nlc3MgaWRzIGFzIHN0cmluZ3NcbiAqIG9yIGFuIGVtcHR5IGFycmF5XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFBpZHMgKHBhdHRlcm4sIG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgbXVsdGkgPSB0cnVlLFxuICAgIGlnbm9yZUNhc2UgPSB0cnVlLFxuICB9ID0gb3B0cztcbiAgY29uc3QgYXJncyA9IFtgLSR7aWdub3JlQ2FzZSA/ICdpJyA6ICcnfWYke211bHRpID8gJycgOiAnbid9YCwgcGF0dGVybl07XG4gIHRyeSB7XG4gICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjKCdwZ3JlcCcsIGFyZ3MpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHN0ZG91dC5zcGxpdCgnXFxuJylcbiAgICAgIC5maWx0ZXIoTnVtYmVyKVxuICAgICAgLm1hcCgoeCkgPT4gYCR7eH1gKTtcbiAgICByZXR1cm4gbXVsdGkgPyByZXN1bHQgOiAoXy5pc0VtcHR5KHJlc3VsdCkgPyBbXSA6IF8uZmlyc3QocmVzdWx0KSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBlbnYgb2JqZWN0IHRvIHRoZSBmb3JtYXQgd2hhdCBJREIgcHJvY2VzcyBleHBlY3RzXG4gKiBAcGFyYW0ge09iamVjdH0gZW52IFRoZSBvYmplY3Qgb2YgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRUb0lEQkVudiAoZW52KSB7XG4gIGlmICghXy5pc1BsYWluT2JqZWN0KGVudikgfHwgXy5pc0VtcHR5KGVudikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gXy5yZWR1Y2UoZW52LCAocmVzdWx0LCB2YWx1ZSwga2V5KSA9PiB7XG4gICAgcmVzdWx0W0lEQl9FTlZfUFJFRklYICsga2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9KTtcbn1cblxuLyoqXG4gKiBTb21lIGlkYiBjb21tYW5kcyBkb24ndCBwcm9wZXJseSBmb3JtYXQgdGhlaXJcbiAqIG91dHB1dCBpZiBgLS1qc29uYCBhcmd1bWVudCBpcyBwcm92aWRlZC4gVGhpcyBoZWxwZXJcbiAqIGZpeGVzIHRoZSBvcmlnaW5hbCBvdXRwdXQsIHNvIGl0IGNhbiBiZSByZXByZXNlbnRlZCBhc1xuICogYSB2YWxpZCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gb3V0cHV0IFRoZSBvcmlnaW5hbCBjb21tYW5kIG91dHB1dFxuICogQHJldHVybnMge0FycmF5PG9iamVjdD59IEFycmF5IG9mIG9iamVjdHMgb3IgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZml4T3V0cHV0VG9BcnJheSAob3V0cHV0KSB7XG4gIGlmICghXy50cmltKG91dHB1dCkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gb3V0cHV0LnNwbGl0KCdcXG4nKVxuICAgIC5yZWR1Y2UoKGFjYywgeCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFsuLi5hY2MsIEpTT04ucGFyc2UoeCldO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgIH0sIFtdKTtcbn1cblxuZXhwb3J0IHtcbiAgREVGQVVMVF9JREJfRVhFQ19USU1FT1VULCBnZXRQaWRzLCBJREJfRVhFQ1VUQUJMRSxcbiAgSURCX0NPTVBBTklPTl9FWEVDVVRBQkxFLCBERUZBVUxUX0lEQl9QT1JULFxuICBERUZBVUxUX0NPTVBBTklPTl9QT1JULCBERUZBVUxUX0NPTVBBTklPTl9HUlBDX1BPUlQsXG4gIGZpeE91dHB1dFRvQXJyYXksIGNvbnZlcnRUb0lEQkVudlxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUEsTUFBTUEsd0JBQXdCLEdBQUcsS0FBSztBQUFDO0FBQ3ZDLE1BQU1DLGdCQUFnQixHQUFHLElBQUk7QUFBQztBQUM5QixNQUFNQyxjQUFjLEdBQUcsS0FBSztBQUFDO0FBQzdCLE1BQU1DLHdCQUF3QixHQUFHLGVBQWU7QUFBQztBQUNqRCxNQUFNQyxzQkFBc0IsR0FBRyxLQUFLO0FBQUM7QUFDckMsTUFBTUMsMkJBQTJCLEdBQUcsS0FBSztBQUFDO0FBQzFDLE1BQU1DLGNBQWMsR0FBRyxNQUFNO0FBcUI3QixlQUFlQyxPQUFPLENBQUVDLE9BQU8sRUFBRUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQzFDLE1BQU07SUFDSkMsS0FBSyxHQUFHLElBQUk7SUFDWkMsVUFBVSxHQUFHO0VBQ2YsQ0FBQyxHQUFHRixJQUFJO0VBQ1IsTUFBTUcsSUFBSSxHQUFHLENBQUUsSUFBR0QsVUFBVSxHQUFHLEdBQUcsR0FBRyxFQUFHLElBQUdELEtBQUssR0FBRyxFQUFFLEdBQUcsR0FBSSxFQUFDLEVBQUVGLE9BQU8sQ0FBQztFQUN2RSxJQUFJO0lBQ0YsTUFBTTtNQUFDSztJQUFNLENBQUMsR0FBRyxNQUFNLElBQUFDLGtCQUFJLEVBQUMsT0FBTyxFQUFFRixJQUFJLENBQUM7SUFDMUMsTUFBTUcsTUFBTSxHQUFHRixNQUFNLENBQUNHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDOUJDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLENBQ2RDLEdBQUcsQ0FBRUMsQ0FBQyxJQUFNLEdBQUVBLENBQUUsRUFBQyxDQUFDO0lBQ3JCLE9BQU9WLEtBQUssR0FBR0ssTUFBTSxHQUFJTSxlQUFDLENBQUNDLE9BQU8sQ0FBQ1AsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHTSxlQUFDLENBQUNFLEtBQUssQ0FBQ1IsTUFBTSxDQUFFO0VBQ3BFLENBQUMsQ0FBQyxPQUFPUyxHQUFHLEVBQUU7SUFDWixPQUFPLEVBQUU7RUFDWDtBQUNGO0FBTUEsU0FBU0MsZUFBZSxDQUFFQyxHQUFHLEVBQUU7RUFDN0IsSUFBSSxDQUFDTCxlQUFDLENBQUNNLGFBQWEsQ0FBQ0QsR0FBRyxDQUFDLElBQUlMLGVBQUMsQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsRUFBRTtJQUMzQyxPQUFPLElBQUk7RUFDYjtFQUNBLE9BQU9MLGVBQUMsQ0FBQ08sTUFBTSxDQUFDRixHQUFHLEVBQUUsQ0FBQ1gsTUFBTSxFQUFFYyxLQUFLLEVBQUVDLEdBQUcsS0FBSztJQUMzQ2YsTUFBTSxDQUFDVCxjQUFjLEdBQUd3QixHQUFHLENBQUMsR0FBR0QsS0FBSztJQUNwQyxPQUFPZCxNQUFNO0VBQ2YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1I7QUFXQSxTQUFTZ0IsZ0JBQWdCLENBQUVDLE1BQU0sRUFBRTtFQUNqQyxJQUFJLENBQUNYLGVBQUMsQ0FBQ1ksSUFBSSxDQUFDRCxNQUFNLENBQUMsRUFBRTtJQUNuQixPQUFPLEVBQUU7RUFDWDtFQUVBLE9BQU9BLE1BQU0sQ0FBQ2hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDdEJZLE1BQU0sQ0FBQyxDQUFDTSxHQUFHLEVBQUVkLENBQUMsS0FBSztJQUNsQixJQUFJO01BQ0YsT0FBTyxDQUFDLEdBQUdjLEdBQUcsRUFBRUMsSUFBSSxDQUFDQyxLQUFLLENBQUNoQixDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsT0FBT2lCLENBQUMsRUFBRTtNQUNWLE9BQU9ILEdBQUc7SUFDWjtFQUNGLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDViJ9