"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _imageUtil = require("../lib/image-util");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

const FIXTURES_ROOT = _path.default.resolve(__dirname, '..', '..', 'test', 'images');

async function getImage(name) {
  const imagePath = _path.default.resolve(FIXTURES_ROOT, name);

  return await _lib.fs.readFile(imagePath, 'utf8');
}

describe('image-util', function () {
  before(function () {
    return this.skip();
  });
  describe('cropBase64Image', function () {
    let originalImage = null;
    before(async function () {
      const originalImage64 = await getImage('full-image.b64');
      originalImage = await (0, _imageUtil.base64ToImage)(originalImage64);
      originalImage.width.should.be.equal(640, 'unexpected width');
      originalImage.height.should.be.equal(1136, 'unexpected height');
    });
    it('should verify that an image is cropped correctly', async function () {
      const croppedImage = await (0, _imageUtil.cropImage)(originalImage, {
        left: 35,
        top: 107,
        width: 323,
        height: 485
      });
      croppedImage.width.should.be.equal(323, 'unexpected width');
      croppedImage.height.should.be.equal(485, 'unexpected height');
      const croppedImageShouldBe = await getImage('cropped-image.b64');
      const croppedImage64 = await (0, _imageUtil.imageToBase64)(croppedImage);
      croppedImage64.should.be.equal(croppedImageShouldBe);
    });
  });
  describe('OpenCV helpers', function () {
    this.timeout(120000);
    let imgFixture = null;
    let fullImage = null;
    let partialImage = null;
    let originalImage = null;
    let changedImage = null;
    let rotatedImage = null;
    let numberImage = null;
    before(async function () {
      const imagePath = _path.default.resolve(FIXTURES_ROOT, 'full-image.b64');

      imgFixture = Buffer.from(await _lib.fs.readFile(imagePath, 'binary'), 'base64');
      fullImage = await _lib.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'findwaldo.jpg'));
      partialImage = await _lib.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'waldo.jpg'));
      originalImage = await _lib.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'cc1.png'));
      changedImage = await _lib.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'cc2.png'));
      numberImage = await _lib.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'number5.png'));
      rotatedImage = await _lib.fs.readFile(_path.default.resolve(FIXTURES_ROOT, 'cc_rotated.png'));
    });
    describe('getImagesMatches', function () {
      it('should calculate the number of matches between two images', async function () {
        for (const detectorName of ['AKAZE', 'ORB']) {
          const {
            count,
            totalCount
          } = await (0, _imageUtil.getImagesMatches)(fullImage, fullImage, {
            detectorName
          });
          count.should.be.above(0);
          totalCount.should.eql(count);
        }
      });
      it('should visualize matches between two images', async function () {
        const {
          visualization
        } = await (0, _imageUtil.getImagesMatches)(fullImage, fullImage, {
          visualize: true
        });
        visualization.should.not.be.empty;
      });
      it('should visualize matches between two images and apply goodMatchesFactor', async function () {
        const {
          visualization,
          points1,
          rect1,
          points2,
          rect2
        } = await (0, _imageUtil.getImagesMatches)(rotatedImage, originalImage, {
          visualize: true,
          matchFunc: 'BruteForceHamming',
          goodMatchesFactor: 40
        });
        visualization.should.not.be.empty;
        points1.length.should.be.above(4);
        rect1.x.should.be.above(0);
        rect1.y.should.be.above(0);
        rect1.width.should.be.above(0);
        rect1.height.should.be.above(0);
        points2.length.should.be.above(4);
        rect2.x.should.be.above(0);
        rect2.y.should.be.above(0);
        rect2.width.should.be.above(0);
        rect2.height.should.be.above(0);
      });
    });
    describe('getImagesSimilarity', function () {
      it('should calculate the similarity score between two images', async function () {
        const {
          score
        } = await (0, _imageUtil.getImagesSimilarity)(imgFixture, imgFixture);
        score.should.be.above(0);
      });
      it('should visualize the similarity between two images', async function () {
        const {
          visualization
        } = await (0, _imageUtil.getImagesSimilarity)(originalImage, changedImage, {
          visualize: true
        });
        visualization.should.not.be.empty;
      });
    });
    describe('getImageOccurrence', function () {
      it('should calculate the partial image position in the full image', async function () {
        const {
          rect,
          score
        } = await (0, _imageUtil.getImageOccurrence)(fullImage, partialImage);
        rect.x.should.be.above(0);
        rect.y.should.be.above(0);
        rect.width.should.be.above(0);
        rect.height.should.be.above(0);
        score.should.be.above(0);
      });
      it('should reject matches that fall below a threshold', async function () {
        await (0, _imageUtil.getImageOccurrence)(fullImage, partialImage, {
          threshold: 1.0
        }).should.eventually.be.rejectedWith(/threshold/);
      });
      it('should visualize the partial image position in the full image', async function () {
        const {
          visualization
        } = await (0, _imageUtil.getImageOccurrence)(fullImage, partialImage, {
          visualize: true
        });
        visualization.should.not.be.empty;
      });
      describe('multiple', function () {
        it('should return matches in the full image', async function () {
          const {
            multiple
          } = await (0, _imageUtil.getImageOccurrence)(originalImage, numberImage, {
            threshold: 0.8,
            multiple: true
          });
          multiple.length.should.be.eq(3);

          for (const result of multiple) {
            result.rect.x.should.be.above(0);
            result.rect.y.should.be.above(0);
            result.rect.width.should.be.above(0);
            result.rect.height.should.be.above(0);
            result.score.should.be.above(0);
          }
        });
        it('should reject matches that fall below a threshold', async function () {
          await (0, _imageUtil.getImageOccurrence)(originalImage, numberImage, {
            threshold: 1.0,
            multiple: true
          }).should.eventually.be.rejectedWith(/threshold/);
        });
        it('should visualize the partial image position in the full image', async function () {
          const {
            multiple
          } = await (0, _imageUtil.getImageOccurrence)(originalImage, numberImage, {
            visualize: true,
            multiple: true
          });

          for (const result of multiple) {
            result.visualization.should.not.be.empty;
          }
        });
      });
    });
  });
  describe('Jimp helpers', function () {
    it('should get a jimp object using image buffer', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const imageBuffer = Buffer.from(base64Image, 'base64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(imageBuffer);
      jimpImg.hash().should.eql('80000000000');
      jimpImg.bitmap.height.should.eql(485);
      jimpImg.bitmap.width.should.eql(323);
    });
    it('should get a jimp object using b64 string', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(base64Image);
      jimpImg.hash().should.eql('80000000000');
      jimpImg.bitmap.height.should.eql(485);
      jimpImg.bitmap.width.should.eql(323);
    });
    it('should error with incorrect data type', async function () {
      await (0, _imageUtil.getJimpImage)(1234).should.eventually.be.rejectedWith(/string or buffer/);
    });
    it('should error with incorrect image data', async function () {
      await (0, _imageUtil.getJimpImage)('foo').should.eventually.be.rejectedWith(/Could not find MIME for Buffer/);
    });
    it('should get an image buffer via the overridden getBuffer method', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(base64Image);
      const buf = await jimpImg.getBuffer(_imageUtil.MIME_PNG);
      _lodash.default.isBuffer(buf).should.be.true;
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
