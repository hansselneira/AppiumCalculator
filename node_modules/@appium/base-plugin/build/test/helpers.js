"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.e2eSetup = void 0;
/* eslint-disable no-console */
const teen_process_1 = require("teen_process");
const appium_1 = require("appium");
const get_port_1 = __importDefault(require("get-port"));
function e2eSetup(opts = {}) {
    let { before, after, server, serverArgs = {}, driverSource, driverPackage, driverName, driverSpec, pluginSource, pluginPackage, pluginSpec, pluginName, port, host, } = opts;
    before(async function () {
        var _a, _b;
        console.log('Checking whether driver dep is installed');
        let listArgs = ['appium', 'driver', 'list', '--json'];
        let { stdout } = await (0, teen_process_1.exec)('npx', listArgs);
        let installed = JSON.parse(stdout);
        if (!((_a = installed[driverName]) === null || _a === void 0 ? void 0 : _a.installed)) {
            console.log('Not installed, installing...');
            const driverArgs = ['appium', 'driver', 'install', '--source', driverSource, driverSpec];
            if (driverPackage) {
                driverArgs.push('--package', driverPackage);
            }
            await (0, teen_process_1.exec)('npx', driverArgs);
        }
        console.log('Driver dep is installed');
        console.log('Checking whether plugin is installed');
        listArgs = ['appium', 'plugin', 'list', '--json'];
        ({ stdout } = await (0, teen_process_1.exec)('npx', listArgs));
        installed = JSON.parse(stdout);
        if (!((_b = installed[pluginName]) === null || _b === void 0 ? void 0 : _b.installed)) {
            console.log('Installing the local version of this plugin');
            const pluginArgs = ['appium', 'plugin', 'install', '--source', pluginSource, pluginSpec];
            if (pluginPackage) {
                pluginArgs.push('--package', pluginPackage);
            }
            await (0, teen_process_1.exec)('npx', pluginArgs);
        }
        console.log('This plugin is installed');
        if (!port) {
            port = await (0, get_port_1.default)();
        }
        console.log(`Will use port ${port} for Appium server`);
        this.port = port;
        const args = { port, host, usePlugins: [pluginName], useDrivers: [driverName], ...serverArgs };
        server = await (0, appium_1.main)(args);
    });
    after(function () {
        if (server) {
            server.close();
        }
    });
    return port;
}
exports.e2eSetup = e2eSetup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwrQkFBK0I7QUFDL0IsK0NBQW9DO0FBQ3BDLG1DQUE4QztBQUM5Qyx3REFBK0I7QUFFL0IsU0FBUyxRQUFRLENBQUUsSUFBSSxHQUFHLEVBQUU7SUFDMUIsSUFBSSxFQUNGLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxFQUNOLFVBQVUsR0FBRyxFQUFFLEVBQ2YsWUFBWSxFQUNaLGFBQWEsRUFDYixVQUFVLEVBQ1YsVUFBVSxFQUNWLFlBQVksRUFDWixhQUFhLEVBQ2IsVUFBVSxFQUNWLFVBQVUsRUFDVixJQUFJLEVBQ0osSUFBSSxHQUNMLEdBQUcsSUFBSSxDQUFDO0lBRVQsTUFBTSxDQUFDLEtBQUs7O1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQ3hELElBQUksUUFBUSxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEQsSUFBSSxFQUFDLE1BQU0sRUFBQyxHQUFHLE1BQU0sSUFBQSxtQkFBSSxFQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzQyxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRW5DLElBQUksQ0FBQyxDQUFBLE1BQUEsU0FBUyxDQUFDLFVBQVUsQ0FBQywwQ0FBRSxTQUFTLENBQUEsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDNUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3pGLElBQUksYUFBYSxFQUFFO2dCQUNqQixVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQzthQUM3QztZQUNELE1BQU0sSUFBQSxtQkFBSSxFQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztTQUMvQjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUV2QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7UUFDcEQsUUFBUSxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbEQsQ0FBQyxFQUFDLE1BQU0sRUFBQyxHQUFHLE1BQU0sSUFBQSxtQkFBSSxFQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxDQUFBLE1BQUEsU0FBUyxDQUFDLFVBQVUsQ0FBQywwQ0FBRSxTQUFTLENBQUEsRUFBRTtZQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7WUFDM0QsTUFBTSxVQUFVLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3pGLElBQUksYUFBYSxFQUFFO2dCQUNqQixVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQzthQUM3QztZQUNELE1BQU0sSUFBQSxtQkFBSSxFQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztTQUMvQjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxHQUFHLE1BQU0sSUFBQSxrQkFBTyxHQUFFLENBQUM7U0FDeEI7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixJQUFJLG9CQUFvQixDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFFakIsTUFBTSxJQUFJLEdBQUcsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsVUFBVSxFQUFDLENBQUM7UUFDN0YsTUFBTSxHQUFHLE1BQU0sSUFBQSxhQUFZLEVBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxLQUFLLENBQUM7UUFDSixJQUFJLE1BQU0sRUFBRTtZQUNWLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNoQjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRVEsNEJBQVEifQ==