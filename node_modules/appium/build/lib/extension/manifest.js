"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Manifest = void 0;

require("source-map-support/register");

var _support = require("@appium/support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _yaml = _interopRequireDefault(require("yaml"));

var _constants = require("../constants");

var _logger = _interopRequireDefault(require("../logger"));

var _extensionConfig = require("./extension-config");

var _packageChanged = require("./package-changed");

const DEFAULT_SEARCH_DEPTH = 4;
const DEFAULT_FIND_EXTENSIONS_OPTS = Object.freeze({
  depthLimit: DEFAULT_SEARCH_DEPTH,
  filter: filepath => !_path.default.basename(filepath).startsWith('.')
});
const CONFIG_SCHEMA_REV = 2;
const CONFIG_DATA_DRIVER_KEY = `${_constants.DRIVER_TYPE}s`;
const CONFIG_DATA_PLUGIN_KEY = `${_constants.PLUGIN_TYPE}s`;
const INITIAL_MANIFEST_DATA = Object.freeze({
  [CONFIG_DATA_DRIVER_KEY]: Object.freeze({}),
  [CONFIG_DATA_PLUGIN_KEY]: Object.freeze({}),
  schemaRev: CONFIG_SCHEMA_REV
});

function isExtension(value) {
  return _lodash.default.isPlainObject(value) && _lodash.default.isPlainObject(value.appium) && _lodash.default.isString(value.name) && _lodash.default.isString(value.version);
}

function isDriver(value) {
  return isExtension(value) && _lodash.default.isString(_lodash.default.get(value, 'appium.driverName')) && _lodash.default.isString(_lodash.default.get(value, 'appium.automationName')) && _lodash.default.isArray(_lodash.default.get(value, 'appium.platformNames'));
}

function isPlugin(value) {
  return isExtension(value) && _lodash.default.isString(_lodash.default.get(value, 'appium.pluginName'));
}

class Manifest {
  _data;
  _appiumHome;
  _manifestPath;
  _writing;
  _reading;

  constructor(appiumHome) {
    this._appiumHome = appiumHome;
    this._data = _lodash.default.cloneDeep(INITIAL_MANIFEST_DATA);
  }

  static getInstance = _lodash.default.memoize(function _getInstance(appiumHome) {
    return new Manifest(appiumHome);
  });

  async syncWithInstalledExtensions({
    depthLimit = DEFAULT_SEARCH_DEPTH
  } = {}) {
    const walkOpts = _lodash.default.defaults({
      depthLimit
    }, DEFAULT_FIND_EXTENSIONS_OPTS);

    let didChange = false;

    for await (const {
      stats,
      path: filepath
    } of _support.fs.walk(this._appiumHome, walkOpts)) {
      if (filepath !== this._appiumHome && stats.isDirectory()) {
        try {
          const pkg = await _support.env.readPackageInDir(filepath);

          if (pkg && isExtension(pkg)) {
            const added = this.addExtensionFromPackage(pkg, _path.default.join(filepath, 'package.json'));
            didChange = didChange || added;
          }
        } catch {}
      }
    }

    return didChange;
  }

  hasDriver(name) {
    return Boolean(this._data.drivers[name]);
  }

  hasPlugin(name) {
    return Boolean(this._data.plugins[name]);
  }

  addExtensionFromPackage(pkgJson, pkgPath) {
    const internal = {
      pkgName: pkgJson.name,
      version: pkgJson.version,
      installType: _extensionConfig.INSTALL_TYPE_NPM,
      installSpec: `${pkgJson.name}@${pkgJson.version}`
    };

    if (isDriver(pkgJson)) {
      if (!this.hasDriver(pkgJson.appium.driverName)) {
        this.addExtension(_constants.DRIVER_TYPE, pkgJson.appium.driverName, { ..._lodash.default.omit(pkgJson.appium, 'driverName'),
          ...internal
        });
        return true;
      }

      return false;
    } else if (isPlugin(pkgJson)) {
      if (!this.hasPlugin(pkgJson.appium.pluginName)) {
        this.addExtension(_constants.PLUGIN_TYPE, pkgJson.appium.pluginName, { ..._lodash.default.omit(pkgJson.appium, 'pluginName'),
          ...internal
        });
        return true;
      }

      return false;
    } else {
      throw new TypeError(`The extension in ${_path.default.dirname(pkgPath)} is neither a valid driver nor a valid plugin.`);
    }
  }

  addExtension(extType, extName, extData) {
    this._data[`${extType}s`][extName] = extData;
  }

  get appiumHome() {
    return this._appiumHome;
  }

  get manifestPath() {
    return this._manifestPath;
  }

  getExtensionData(extType) {
    return this._data[`${extType}s`];
  }

  async read() {
    if (this._reading) {
      await this._reading;
      return this._data;
    }

    this._reading = (async () => {
      let data;
      let isNewFile = false;
      await this._setManifestPath();

      try {
        _logger.default.debug(`Reading ${this._manifestPath}...`);

        const yaml = await _support.fs.readFile(this._manifestPath, 'utf8');
        data = _yaml.default.parse(yaml);
      } catch (err) {
        if (err.code === 'ENOENT') {
          data = _lodash.default.cloneDeep(INITIAL_MANIFEST_DATA);
          isNewFile = true;
        } else {
          if (this._manifestPath) {
            throw new Error(`Appium had trouble loading the extension installation ` + `cache file (${this._manifestPath}). It may be invalid YAML. Specific error: ${err.message}`);
          } else {
            throw new Error(`Appium encountered an unknown problem. Specific error: ${err.message}`);
          }
        }
      }

      this._data = data;
      let installedExtensionsChanged = false;

      if ((await _support.env.hasAppiumDependency(this.appiumHome)) && (await (0, _packageChanged.packageDidChange)(this.appiumHome))) {
        installedExtensionsChanged = await this.syncWithInstalledExtensions();
      }

      if (isNewFile || installedExtensionsChanged) {
        await this.write();
      }
    })();

    try {
      await this._reading;
      return this._data;
    } finally {
      this._reading = undefined;
    }
  }

  async _setManifestPath() {
    if (!this._manifestPath) {
      this._manifestPath = await _support.env.resolveManifestPath(this._appiumHome);

      if (_path.default.relative(this._appiumHome, this._manifestPath).startsWith('.')) {
        throw new Error(`Mismatch between location of APPIUM_HOME and manifest file. APPIUM_HOME: ${this.appiumHome}, manifest file: ${this._manifestPath}`);
      }
    }

    return this._manifestPath;
  }

  async write() {
    if (this._writing) {
      return this._writing;
    }

    this._writing = (async () => {
      await this._setManifestPath();

      try {
        await _support.fs.mkdirp(_path.default.dirname(this._manifestPath));
      } catch (err) {
        throw new Error(`Appium could not create the directory for the manifest file: ${_path.default.dirname(this._manifestPath)}. Original error: ${err.message}`);
      }

      try {
        await _support.fs.writeFile(this._manifestPath, _yaml.default.stringify(this._data), 'utf8');
        return true;
      } catch (err) {
        throw new Error(`Appium could not write to manifest at ${this._manifestPath} using APPIUM_HOME ${this._appiumHome}. ` + `Please ensure it is writable. Original error: ${err.message}`);
      }
    })();

    try {
      return await this._writing;
    } finally {
      this._writing = undefined;
    }
  }

}

exports.Manifest = Manifest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,