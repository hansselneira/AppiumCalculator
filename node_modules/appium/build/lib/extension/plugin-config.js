"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PluginConfig = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _extensionConfig = require("./extension-config");

var _logger = _interopRequireDefault(require("../logger"));

var _constants = require("../constants");

class PluginConfig extends _extensionConfig.ExtensionConfig {
  static _instances = new WeakMap();

  constructor(manifest, {
    extData,
    logFn
  } = {}) {
    super(_constants.PLUGIN_TYPE, manifest, logFn);

    if (extData) {
      this.validate(extData);
    }
  }

  static create(manifest, {
    extData,
    logFn
  } = {}) {
    const instance = new PluginConfig(manifest, {
      logFn,
      extData
    });

    if (PluginConfig.getInstance(manifest)) {
      throw new Error(`Manifest with APPIUM_HOME ${manifest.appiumHome} already has a PluginConfig; use PluginConfig.getInstance() to retrieve it.`);
    }

    PluginConfig._instances.set(manifest, instance);

    return instance;
  }

  static getInstance(manifest) {
    return PluginConfig._instances.get(manifest);
  }

  extensionDesc(pluginName, {
    version
  }) {
    return `${pluginName}@${version}`;
  }

  print(activeNames) {
    const pluginNames = Object.keys(this.installedExtensions);

    if (_lodash.default.isEmpty(pluginNames)) {
      _logger.default.info(`No plugins have been installed. Use the "appium plugin" ` + 'command to install the one(s) you want to use.');

      return;
    }

    _logger.default.info(`Available plugins:`);

    for (const [pluginName, pluginData] of _lodash.default.toPairs(this.installedExtensions)) {
      const activeTxt = _lodash.default.includes(activeNames, pluginName) ? ' (ACTIVE)' : '';

      _logger.default.info(`  - ${this.extensionDesc(pluginName, pluginData)}${activeTxt}`);
    }

    if (_lodash.default.isEmpty(activeNames)) {
      _logger.default.info('No plugins activated. Use the --use-plugins flag with names of plugins to activate');
    }
  }

}

exports.PluginConfig = PluginConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9leHRlbnNpb24vcGx1Z2luLWNvbmZpZy5qcyJdLCJuYW1lcyI6WyJQbHVnaW5Db25maWciLCJFeHRlbnNpb25Db25maWciLCJfaW5zdGFuY2VzIiwiV2Vha01hcCIsImNvbnN0cnVjdG9yIiwibWFuaWZlc3QiLCJleHREYXRhIiwibG9nRm4iLCJQTFVHSU5fVFlQRSIsInZhbGlkYXRlIiwiY3JlYXRlIiwiaW5zdGFuY2UiLCJnZXRJbnN0YW5jZSIsIkVycm9yIiwiYXBwaXVtSG9tZSIsInNldCIsImdldCIsImV4dGVuc2lvbkRlc2MiLCJwbHVnaW5OYW1lIiwidmVyc2lvbiIsInByaW50IiwiYWN0aXZlTmFtZXMiLCJwbHVnaW5OYW1lcyIsIk9iamVjdCIsImtleXMiLCJpbnN0YWxsZWRFeHRlbnNpb25zIiwiXyIsImlzRW1wdHkiLCJsb2ciLCJpbmZvIiwicGx1Z2luRGF0YSIsInRvUGFpcnMiLCJhY3RpdmVUeHQiLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFLTyxNQUFNQSxZQUFOLFNBQTJCQyxnQ0FBM0IsQ0FBMkM7QUFZOUIsU0FBVkMsVUFBVSxHQUFHLElBQUlDLE9BQUosRUFBSDs7QUFVakJDLEVBQUFBLFdBQVcsQ0FBRUMsUUFBRixFQUFZO0FBQUNDLElBQUFBLE9BQUQ7QUFBVUMsSUFBQUE7QUFBVixNQUFtQixFQUEvQixFQUFtQztBQUM1QyxVQUFNQyxzQkFBTixFQUFtQkgsUUFBbkIsRUFBNkJFLEtBQTdCOztBQUVBLFFBQUlELE9BQUosRUFBYTtBQUNYLFdBQUtHLFFBQUwsQ0FBY0gsT0FBZDtBQUNEO0FBQ0Y7O0FBVVksU0FBTkksTUFBTSxDQUFFTCxRQUFGLEVBQVk7QUFBQ0MsSUFBQUEsT0FBRDtBQUFVQyxJQUFBQTtBQUFWLE1BQW1CLEVBQS9CLEVBQW1DO0FBQzlDLFVBQU1JLFFBQVEsR0FBRyxJQUFJWCxZQUFKLENBQWlCSyxRQUFqQixFQUEyQjtBQUFDRSxNQUFBQSxLQUFEO0FBQVFELE1BQUFBO0FBQVIsS0FBM0IsQ0FBakI7O0FBQ0EsUUFBSU4sWUFBWSxDQUFDWSxXQUFiLENBQXlCUCxRQUF6QixDQUFKLEVBQXdDO0FBQ3RDLFlBQU0sSUFBSVEsS0FBSixDQUFXLDZCQUE0QlIsUUFBUSxDQUFDUyxVQUFXLDZFQUEzRCxDQUFOO0FBQ0Q7O0FBQ0RkLElBQUFBLFlBQVksQ0FBQ0UsVUFBYixDQUF3QmEsR0FBeEIsQ0FBNEJWLFFBQTVCLEVBQXNDTSxRQUF0Qzs7QUFDQSxXQUFPQSxRQUFQO0FBQ0Q7O0FBT2lCLFNBQVhDLFdBQVcsQ0FBRVAsUUFBRixFQUFZO0FBQzVCLFdBQU9MLFlBQVksQ0FBQ0UsVUFBYixDQUF3QmMsR0FBeEIsQ0FBNEJYLFFBQTVCLENBQVA7QUFDRDs7QUFNRFksRUFBQUEsYUFBYSxDQUFFQyxVQUFGLEVBQWM7QUFBQ0MsSUFBQUE7QUFBRCxHQUFkLEVBQXlCO0FBQ3BDLFdBQVEsR0FBRUQsVUFBVyxJQUFHQyxPQUFRLEVBQWhDO0FBQ0Q7O0FBT0RDLEVBQUFBLEtBQUssQ0FBRUMsV0FBRixFQUFlO0FBQ2xCLFVBQU1DLFdBQVcsR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS0MsbUJBQWpCLENBQXBCOztBQUVBLFFBQUlDLGdCQUFFQyxPQUFGLENBQVVMLFdBQVYsQ0FBSixFQUE0QjtBQUMxQk0sc0JBQUlDLElBQUosQ0FBVSwwREFBRCxHQUNELGdEQURSOztBQUVBO0FBQ0Q7O0FBRURELG9CQUFJQyxJQUFKLENBQVUsb0JBQVY7O0FBQ0EsU0FBSyxNQUFNLENBQUNYLFVBQUQsRUFBYVksVUFBYixDQUFYLElBQXVDSixnQkFBRUssT0FBRixDQUFVLEtBQUtOLG1CQUFmLENBQXZDLEVBQTRFO0FBQzFFLFlBQU1PLFNBQVMsR0FBR04sZ0JBQUVPLFFBQUYsQ0FBV1osV0FBWCxFQUF3QkgsVUFBeEIsSUFBc0MsV0FBdEMsR0FBb0QsRUFBdEU7O0FBQ0FVLHNCQUFJQyxJQUFKLENBQVUsT0FBTSxLQUFLWixhQUFMLENBQW1CQyxVQUFuQixFQUErQlksVUFBL0IsQ0FBMkMsR0FBRUUsU0FBVSxFQUF2RTtBQUNEOztBQUVELFFBQUlOLGdCQUFFQyxPQUFGLENBQVVOLFdBQVYsQ0FBSixFQUE0QjtBQUMxQk8sc0JBQUlDLElBQUosQ0FBUyxvRkFBVDtBQUNEO0FBQ0Y7O0FBdkY4QyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1jaGVja1xuXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtFeHRlbnNpb25Db25maWd9IGZyb20gJy4vZXh0ZW5zaW9uLWNvbmZpZyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQge1BMVUdJTl9UWVBFfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG4vKipcbiAqIEBleHRlbmRzIHtFeHRlbnNpb25Db25maWc8UGx1Z2luVHlwZT59XG4gKi9cbmV4cG9ydCBjbGFzcyBQbHVnaW5Db25maWcgZXh0ZW5kcyBFeHRlbnNpb25Db25maWcge1xuXG4gIC8qKlxuICAgKiBBIG1hcHBpbmcgb2Yge0BsaW5rIE1hbmlmZXN0fSBpbnN0YW5jZXMgdG8ge0BsaW5rIFBsdWdpbkNvbmZpZ30gaW5zdGFuY2VzLlxuICAgKlxuICAgKiBgTWFuaWZlc3RgIGFuZCB7QGxpbmsgRXh0ZW5zaW9uQ29uZmlnfSBoYXZlIGEgb25lLXRvLW1hbnkgcmVsYXRpb25zaGlwOyBlYWNoIGBNYW5pZmVzdGAgc2hvdWxkIGJlIGFzc29jaWF0ZWQgd2l0aCBhIGBEcml2ZXJDb25maWdgIGFuZCBhIGBQbHVnaW5Db25maWdgOyBubyBtb3JlLCBubyBsZXNzLlxuICAgKlxuICAgKiBUaGlzIHZhcmlhYmxlIHRyYWNrcyB0aGUgYE1hbmlmZXN0YC10by1gUGx1Z2luQ29uZmlnYCBwb3J0aW9uLlxuICAgKlxuICAgKiBAdHlwZSB7V2Vha01hcDxNYW5pZmVzdCxQbHVnaW5Db25maWc+fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgIHN0YXRpYyBfaW5zdGFuY2VzID0gbmV3IFdlYWtNYXAoKTtcblxuICAgLyoqXG4gICAqIENhbGwge0BsaW5rIFBsdWdpbkNvbmZpZy5jcmVhdGV9IGluc3RlYWQuXG4gICAqXG4gICAqIEp1c3QgY2FsbHMgdGhlIHN1cGVyY2xhc3MnIGNvbnN0cnVjdG9yIHdpdGggdGhlIGNvcnJlY3QgZXh0ZW5zaW9uIHR5cGVcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtpbXBvcnQoJy4vbWFuaWZlc3QnKS5NYW5pZmVzdH0gbWFuaWZlc3QgLSBJTyBvYmplY3RcbiAgICogQHBhcmFtIHtQbHVnaW5Db25maWdPcHRpb25zfSBbb3B0c11cbiAgICovXG4gICBjb25zdHJ1Y3RvciAobWFuaWZlc3QsIHtleHREYXRhLCBsb2dGbn0gPSB7fSkge1xuICAgICBzdXBlcihQTFVHSU5fVFlQRSwgbWFuaWZlc3QsIGxvZ0ZuKTtcblxuICAgICBpZiAoZXh0RGF0YSkge1xuICAgICAgIHRoaXMudmFsaWRhdGUoZXh0RGF0YSk7XG4gICAgIH1cbiAgIH1cblxuICAgLyoqXG4gICAgKiBDcmVhdGVzIGEgbmV3IHtAbGluayBQbHVnaW5Db25maWd9IGluc3RhbmNlIGZvciBhIHtAbGluayBNYW5pZmVzdH0gaW5zdGFuY2UuXG4gICAgKlxuICAgICogQHBhcmFtIHtNYW5pZmVzdH0gbWFuaWZlc3RcbiAgICAqIEBwYXJhbSB7UGx1Z2luQ29uZmlnT3B0aW9uc30gW29wdHNdXG4gICAgKiBAdGhyb3dzIElmIGBtYW5pZmVzdGAgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggYSBgUGx1Z2luQ29uZmlnYFxuICAgICogQHJldHVybnMge1BsdWdpbkNvbmZpZ31cbiAgICAqL1xuICAgc3RhdGljIGNyZWF0ZSAobWFuaWZlc3QsIHtleHREYXRhLCBsb2dGbn0gPSB7fSkge1xuICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBQbHVnaW5Db25maWcobWFuaWZlc3QsIHtsb2dGbiwgZXh0RGF0YX0pO1xuICAgICBpZiAoUGx1Z2luQ29uZmlnLmdldEluc3RhbmNlKG1hbmlmZXN0KSkge1xuICAgICAgIHRocm93IG5ldyBFcnJvcihgTWFuaWZlc3Qgd2l0aCBBUFBJVU1fSE9NRSAke21hbmlmZXN0LmFwcGl1bUhvbWV9IGFscmVhZHkgaGFzIGEgUGx1Z2luQ29uZmlnOyB1c2UgUGx1Z2luQ29uZmlnLmdldEluc3RhbmNlKCkgdG8gcmV0cmlldmUgaXQuYCk7XG4gICAgIH1cbiAgICAgUGx1Z2luQ29uZmlnLl9pbnN0YW5jZXMuc2V0KG1hbmlmZXN0LCBpbnN0YW5jZSk7XG4gICAgIHJldHVybiBpbnN0YW5jZTtcbiAgIH1cblxuICAgLyoqXG4gICAgICogUmV0dXJucyBhIFBsdWdpbkNvbmZpZyBhc3NvY2lhdGVkIHdpdGggYSBNYW5pZmVzdFxuICAgICAqIEBwYXJhbSB7TWFuaWZlc3R9IG1hbmlmZXN0XG4gICAgICogQHJldHVybnMge1BsdWdpbkNvbmZpZ3x1bmRlZmluZWR9XG4gICAgICovXG4gICBzdGF0aWMgZ2V0SW5zdGFuY2UgKG1hbmlmZXN0KSB7XG4gICAgIHJldHVybiBQbHVnaW5Db25maWcuX2luc3RhbmNlcy5nZXQobWFuaWZlc3QpO1xuICAgfVxuICAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwbHVnaW5OYW1lXG4gICAqIEBwYXJhbSB7UGx1Z2luRGF0YX0gcGx1Z2luRGF0YVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgIGV4dGVuc2lvbkRlc2MgKHBsdWdpbk5hbWUsIHt2ZXJzaW9ufSkge1xuICAgICByZXR1cm4gYCR7cGx1Z2luTmFtZX1AJHt2ZXJzaW9ufWA7XG4gICB9XG5cbiAgIC8qKlxuICAgKlxuICAgKiBAcGFyYW0geyhrZXlvZiBpbXBvcnQoJy4vbWFuaWZlc3QnKS5FeHRSZWNvcmQ8UGx1Z2luVHlwZT4pW119IGFjdGl2ZU5hbWVzXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgIHByaW50IChhY3RpdmVOYW1lcykge1xuICAgICBjb25zdCBwbHVnaW5OYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuaW5zdGFsbGVkRXh0ZW5zaW9ucyk7XG5cbiAgICAgaWYgKF8uaXNFbXB0eShwbHVnaW5OYW1lcykpIHtcbiAgICAgICBsb2cuaW5mbyhgTm8gcGx1Z2lucyBoYXZlIGJlZW4gaW5zdGFsbGVkLiBVc2UgdGhlIFwiYXBwaXVtIHBsdWdpblwiIGAgK1xuICAgICAgICAgICAgICAgJ2NvbW1hbmQgdG8gaW5zdGFsbCB0aGUgb25lKHMpIHlvdSB3YW50IHRvIHVzZS4nKTtcbiAgICAgICByZXR1cm47XG4gICAgIH1cblxuICAgICBsb2cuaW5mbyhgQXZhaWxhYmxlIHBsdWdpbnM6YCk7XG4gICAgIGZvciAoY29uc3QgW3BsdWdpbk5hbWUsIHBsdWdpbkRhdGFdIG9mIF8udG9QYWlycyh0aGlzLmluc3RhbGxlZEV4dGVuc2lvbnMpKSB7XG4gICAgICAgY29uc3QgYWN0aXZlVHh0ID0gXy5pbmNsdWRlcyhhY3RpdmVOYW1lcywgcGx1Z2luTmFtZSkgPyAnIChBQ1RJVkUpJyA6ICcnO1xuICAgICAgIGxvZy5pbmZvKGAgIC0gJHt0aGlzLmV4dGVuc2lvbkRlc2MocGx1Z2luTmFtZSwgcGx1Z2luRGF0YSl9JHthY3RpdmVUeHR9YCk7XG4gICAgIH1cblxuICAgICBpZiAoXy5pc0VtcHR5KGFjdGl2ZU5hbWVzKSkge1xuICAgICAgIGxvZy5pbmZvKCdObyBwbHVnaW5zIGFjdGl2YXRlZC4gVXNlIHRoZSAtLXVzZS1wbHVnaW5zIGZsYWcgd2l0aCBuYW1lcyBvZiBwbHVnaW5zIHRvIGFjdGl2YXRlJyk7XG4gICAgIH1cbiAgIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBQbHVnaW5Db25maWdPcHRpb25zXG4gKiBAcHJvcGVydHkge2ltcG9ydCgnLi9leHRlbnNpb24tY29uZmlnJykuRXh0ZW5zaW9uTG9nRm59IFtsb2dGbl0gLSBPcHRpb25hbCBsb2dnaW5nIGZ1bmN0aW9uXG4gKiBAcHJvcGVydHkge2ltcG9ydCgnLi9tYW5pZmVzdCcpLkV4dFJlY29yZDxQbHVnaW5UeXBlPn0gW2V4dERhdGFdIC0gRXh0ZW5zaW9uIGRhdGFcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vbWFuaWZlc3QnKS5QbHVnaW5UeXBlfSBQbHVnaW5UeXBlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL21hbmlmZXN0JykuRXh0RGF0YTxQbHVnaW5UeXBlPn0gUGx1Z2luRGF0YVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9tYW5pZmVzdCcpLk1hbmlmZXN0fSBNYW5pZmVzdFxuICovXG4iXX0=