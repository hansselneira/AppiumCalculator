"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageDidChange = packageDidChange;

require("source-map-support/register");

var _support = require("@appium/support");

var _packageChanged = require("package-changed");

var _path = _interopRequireDefault(require("path"));

var _constants = require("../constants");

var _logger = _interopRequireDefault(require("../logger"));

async function packageDidChange(appiumHome) {
  const hashFilename = _path.default.join(appiumHome, _constants.PKG_HASHFILE_RELATIVE_PATH);

  let isChanged;
  let writeHash;
  let hash;
  let oldHash;

  const hashFilenameDir = _path.default.dirname(hashFilename);

  _logger.default.debug(`Creating hash file directory: ${hashFilenameDir}`);

  try {
    await _support.fs.mkdirp(hashFilenameDir);
  } catch (err) {
    throw new Error(`Appium could not create the directory for hash file: ${hashFilenameDir}. Original error: ${err.message}`);
  }

  try {
    ({
      isChanged,
      writeHash,
      oldHash,
      hash
    } = await (0, _packageChanged.isPackageChanged)({
      cwd: appiumHome,
      hashFilename: _constants.PKG_HASHFILE_RELATIVE_PATH
    }));
  } catch {
    return true;
  }

  if (isChanged) {
    try {
      var _oldHash;

      writeHash();

      _logger.default.debug(`Updated hash of ${appiumHome}/package.json from: ${(_oldHash = oldHash) !== null && _oldHash !== void 0 ? _oldHash : '(none)'} to: ${hash}`);
    } catch (err) {
      throw new Error(`Appium could not write hash file: ${hashFilenameDir}. Original error: ${err.message}`);
    }
  }

  return isChanged;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9leHRlbnNpb24vcGFja2FnZS1jaGFuZ2VkLmpzIl0sIm5hbWVzIjpbInBhY2thZ2VEaWRDaGFuZ2UiLCJhcHBpdW1Ib21lIiwiaGFzaEZpbGVuYW1lIiwicGF0aCIsImpvaW4iLCJQS0dfSEFTSEZJTEVfUkVMQVRJVkVfUEFUSCIsImlzQ2hhbmdlZCIsIndyaXRlSGFzaCIsImhhc2giLCJvbGRIYXNoIiwiaGFzaEZpbGVuYW1lRGlyIiwiZGlybmFtZSIsImxvZyIsImRlYnVnIiwiZnMiLCJta2RpcnAiLCJlcnIiLCJFcnJvciIsIm1lc3NhZ2UiLCJjd2QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBV08sZUFBZUEsZ0JBQWYsQ0FBaUNDLFVBQWpDLEVBQTZDO0FBQ2xELFFBQU1DLFlBQVksR0FBR0MsY0FBS0MsSUFBTCxDQUFVSCxVQUFWLEVBQXNCSSxxQ0FBdEIsQ0FBckI7O0FBS0EsTUFBSUMsU0FBSjtBQUVBLE1BQUlDLFNBQUo7QUFFQSxNQUFJQyxJQUFKO0FBRUEsTUFBSUMsT0FBSjs7QUFHQSxRQUFNQyxlQUFlLEdBQUdQLGNBQUtRLE9BQUwsQ0FBYVQsWUFBYixDQUF4Qjs7QUFDQVUsa0JBQUlDLEtBQUosQ0FBVyxpQ0FBZ0NILGVBQWdCLEVBQTNEOztBQUNBLE1BQUk7QUFDRixVQUFNSSxZQUFHQyxNQUFILENBQVVMLGVBQVYsQ0FBTjtBQUNELEdBRkQsQ0FFRSxPQUFPTSxHQUFQLEVBQVk7QUFDWixVQUFNLElBQUlDLEtBQUosQ0FDSCx3REFBdURQLGVBQWdCLHFCQUFvQk0sR0FBRyxDQUFDRSxPQUFRLEVBRHBHLENBQU47QUFHRDs7QUFFRCxNQUFJO0FBQ0YsS0FBQztBQUFDWixNQUFBQSxTQUFEO0FBQVlDLE1BQUFBLFNBQVo7QUFBdUJFLE1BQUFBLE9BQXZCO0FBQWdDRCxNQUFBQTtBQUFoQyxRQUF3QyxNQUFNLHNDQUFpQjtBQUM5RFcsTUFBQUEsR0FBRyxFQUFFbEIsVUFEeUQ7QUFFOURDLE1BQUFBLFlBQVksRUFBRUc7QUFGZ0QsS0FBakIsQ0FBL0M7QUFJRCxHQUxELENBS0UsTUFBTTtBQUNOLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQUlDLFNBQUosRUFBZTtBQUNiLFFBQUk7QUFBQTs7QUFDRkMsTUFBQUEsU0FBUzs7QUFDVEssc0JBQUlDLEtBQUosQ0FBVyxtQkFBa0JaLFVBQVcsdUJBQTlCLFlBQW9EUSxPQUFwRCwrQ0FBK0QsUUFBUyxRQUFPRCxJQUFLLEVBQTlGO0FBQ0QsS0FIRCxDQUdFLE9BQU9RLEdBQVAsRUFBWTtBQUNaLFlBQU0sSUFBSUMsS0FBSixDQUNILHFDQUFvQ1AsZUFBZ0IscUJBQW9CTSxHQUFHLENBQUNFLE9BQVEsRUFEakYsQ0FBTjtBQUdEO0FBQ0Y7O0FBRUQsU0FBT1osU0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG5cbmltcG9ydCB7IGZzIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IGlzUGFja2FnZUNoYW5nZWQgfSBmcm9tICdwYWNrYWdlLWNoYW5nZWQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBQS0dfSEFTSEZJTEVfUkVMQVRJVkVfUEFUSCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBleHRlbnNpb25zIGhhdmUgY2hhbmdlZCwgYW5kIHVwZGF0ZXMgYSBoYXNoIHRoZSBgcGFja2FnZS5qc29uYCBpbiBgYXBwaXVtSG9tZWAgaWYgc28uXG4gKlxuICogSWYgdGhleSBoYXZlLCB3ZSBuZWVkIHRvIHN5bmMgdGhlbSB3aXRoIHRoZSBgZXh0ZW5zaW9ucy55YW1sYCBtYW5pZmVzdC5cbiAqXG4gKiBfV2FybmluZzogdGhpcyBtYWtlcyBhIGJsb2NraW5nIGNhbGwgdG8gYHdyaXRlRmlsZVN5bmNgLl9cbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBpdW1Ib21lXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gYHRydWVgIGlmIGBwYWNrYWdlLmpzb25gIGBhcHBpdW1Ib21lYCBjaGFuZ2VkXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYWNrYWdlRGlkQ2hhbmdlIChhcHBpdW1Ib21lKSB7XG4gIGNvbnN0IGhhc2hGaWxlbmFtZSA9IHBhdGguam9pbihhcHBpdW1Ib21lLCBQS0dfSEFTSEZJTEVfUkVMQVRJVkVfUEFUSCk7XG5cbiAgLy8gWFhYOiB0aGUgdHlwZXMgaW4gYHBhY2thZ2UtY2hhbmdlZGAgc2VlbSB0byBiZSB3cm9uZy5cblxuICAvKiogQHR5cGUge2Jvb2xlYW59ICovXG4gIGxldCBpc0NoYW5nZWQ7XG4gIC8qKiBAdHlwZSB7KCkgPT4gdm9pZH0gKi9cbiAgbGV0IHdyaXRlSGFzaDtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIGxldCBoYXNoO1xuICAvKiogQHR5cGUge3N0cmluZ3x1bmRlZmluZWR9ICovXG4gIGxldCBvbGRIYXNoO1xuXG4gIC8vIGZpcnN0IG1rZGlycCB0aGUgdGFyZ2V0IGRpci5cbiAgY29uc3QgaGFzaEZpbGVuYW1lRGlyID0gcGF0aC5kaXJuYW1lKGhhc2hGaWxlbmFtZSk7XG4gIGxvZy5kZWJ1ZyhgQ3JlYXRpbmcgaGFzaCBmaWxlIGRpcmVjdG9yeTogJHtoYXNoRmlsZW5hbWVEaXJ9YCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZnMubWtkaXJwKGhhc2hGaWxlbmFtZURpcik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBBcHBpdW0gY291bGQgbm90IGNyZWF0ZSB0aGUgZGlyZWN0b3J5IGZvciBoYXNoIGZpbGU6ICR7aGFzaEZpbGVuYW1lRGlyfS4gT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCxcbiAgICApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAoe2lzQ2hhbmdlZCwgd3JpdGVIYXNoLCBvbGRIYXNoLCBoYXNofSA9IGF3YWl0IGlzUGFja2FnZUNoYW5nZWQoe1xuICAgICAgY3dkOiBhcHBpdW1Ib21lLFxuICAgICAgaGFzaEZpbGVuYW1lOiBQS0dfSEFTSEZJTEVfUkVMQVRJVkVfUEFUSCxcbiAgICB9KSk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzQ2hhbmdlZCkge1xuICAgIHRyeSB7XG4gICAgICB3cml0ZUhhc2goKTtcbiAgICAgIGxvZy5kZWJ1ZyhgVXBkYXRlZCBoYXNoIG9mICR7YXBwaXVtSG9tZX0vcGFja2FnZS5qc29uIGZyb206ICR7b2xkSGFzaCA/PyAnKG5vbmUpJ30gdG86ICR7aGFzaH1gKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEFwcGl1bSBjb3VsZCBub3Qgd3JpdGUgaGFzaCBmaWxlOiAke2hhc2hGaWxlbmFtZURpcn0uIE9yaWdpbmFsIGVycm9yOiAke2Vyci5tZXNzYWdlfWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpc0NoYW5nZWQ7XG59XG4iXX0=