"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = exports.resetSchema = exports.registerSchema = exports.isFinalized = exports.isAllowedSchemaFileExtension = exports.hasArgSpec = exports.getSchema = exports.getDefaultsForSchema = exports.getDefaultsForExtension = exports.getArgSpec = exports.getAllArgSpecs = exports.flattenSchema = exports.finalizeSchema = exports.SchemaUnsupportedSchemaError = exports.SchemaUnknownSchemaError = exports.SchemaNameConflictError = exports.SchemaFinalizationError = exports.RoachHotelMap = exports.ALLOWED_SCHEMA_EXTENSIONS = void 0;

require("source-map-support/register");

var _ajv = _interopRequireDefault(require("ajv"));

var _ajvFormats = _interopRequireDefault(require("ajv-formats"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _constants = require("../constants");

var _appiumConfigSchema = _interopRequireDefault(require("./appium-config-schema"));

var _argSpec = require("./arg-spec");

var _keywords = require("./keywords");

class RoachHotelMap extends Map {
  set(key, value) {
    if (this.has(key)) {
      throw new Error(`${key} is already set`);
    }

    return super.set(key, value);
  }

  delete(key) {
    return false;
  }

  clear() {
    throw new Error(`Cannot clear RoachHotelMap`);
  }

}

exports.RoachHotelMap = RoachHotelMap;
const ALLOWED_SCHEMA_EXTENSIONS = new Set(['.json', '.js', '.cjs']);
exports.ALLOWED_SCHEMA_EXTENSIONS = ALLOWED_SCHEMA_EXTENSIONS;

class AppiumSchema {
  _argSpecs = new RoachHotelMap();
  _registeredSchemas = {
    [_constants.DRIVER_TYPE]: new Map(),
    [_constants.PLUGIN_TYPE]: new Map()
  };
  _ajv;
  static _instance;
  _finalizedSchemas = null;

  constructor() {
    this._ajv = AppiumSchema._instantiateAjv();
  }

  static create() {
    if (!AppiumSchema._instance) {
      const instance = new AppiumSchema();
      AppiumSchema._instance = instance;

      _lodash.default.bindAll(instance, ['finalize', 'flatten', 'getAllArgSpecs', 'getArgSpec', 'getDefaults', 'getDefaultsForExtension', 'getSchema', 'hasArgSpec', 'isFinalized', 'registerSchema', 'hasRegisteredSchema', 'reset', 'validate']);
    }

    return AppiumSchema._instance;
  }

  hasRegisteredSchema(extType, extName) {
    return this._registeredSchemas[extType].has(extName);
  }

  isFinalized() {
    return Boolean(this._finalizedSchemas);
  }

  getAllArgSpecs() {
    return this._argSpecs;
  }

  finalize() {
    if (this.isFinalized()) {
      return this._finalizedSchemas;
    }

    const ajv = this._ajv;

    const baseSchema = _lodash.default.cloneDeep(_appiumConfigSchema.default);

    const addArgSpecs = (schema, extType, extName) => {
      for (let [propName, propSchema] of Object.entries(schema)) {
        const argSpec = _argSpec.ArgSpec.create(propName, {
          dest: propSchema.appiumCliDest,
          defaultValue: propSchema.default,
          extType,
          extName
        });

        const {
          arg
        } = argSpec;

        this._argSpecs.set(arg, argSpec);
      }
    };

    addArgSpecs(_lodash.default.omit(baseSchema.properties.server.properties, [_constants.DRIVER_TYPE, _constants.PLUGIN_TYPE]));
    const finalizedSchemas = {};

    const finalSchema = _lodash.default.reduce(this._registeredSchemas, (baseSchema, extensionSchemas, extType) => {
      extensionSchemas.forEach((schema, extName) => {
        const $ref = _argSpec.ArgSpec.toSchemaBaseRef(extType, extName);

        schema.$id = $ref;
        schema.additionalProperties = false;
        baseSchema.properties.server.properties[extType].properties[extName] = {
          $ref,
          $comment: extName
        };
        ajv.validateSchema(schema, true);
        addArgSpecs(schema.properties, extType, extName);
        ajv.addSchema(schema, $ref);
        finalizedSchemas[$ref] = schema;
      });
      return baseSchema;
    }, baseSchema);

    ajv.addSchema(finalSchema, _argSpec.APPIUM_CONFIG_SCHEMA_ID);
    finalizedSchemas[_argSpec.APPIUM_CONFIG_SCHEMA_ID] = finalSchema;
    ajv.validateSchema(finalSchema, true);
    this._finalizedSchemas = finalizedSchemas;
    return Object.freeze(finalizedSchemas);
  }

  static _instantiateAjv() {
    const ajv = (0, _ajvFormats.default)(new _ajv.default({
      allErrors: true
    }));

    _lodash.default.forEach(_keywords.keywords, keyword => {
      ajv.addKeyword(keyword);
    });

    return ajv;
  }

  reset() {
    for (const schemaId of Object.keys((_this$_finalizedSchem = this._finalizedSchemas) !== null && _this$_finalizedSchem !== void 0 ? _this$_finalizedSchem : {})) {
      var _this$_finalizedSchem;

      this._ajv.removeSchema(schemaId);
    }

    this._argSpecs = new RoachHotelMap();
    this._registeredSchemas = {
      [_constants.DRIVER_TYPE]: new Map(),
      [_constants.PLUGIN_TYPE]: new Map()
    };
    this._finalizedSchemas = null;
    this._ajv = AppiumSchema._instantiateAjv();
  }

  registerSchema(extType, extName, schema) {
    if (!(extType && extName) || _lodash.default.isUndefined(schema)) {
      throw new TypeError('Expected extension type, extension name, and a defined schema');
    }

    if (!AppiumSchema.isSupportedSchemaType(schema)) {
      throw new SchemaUnsupportedSchemaError(schema, extType, extName);
    }

    const normalizedExtName = _lodash.default.kebabCase(extName);

    if (this.hasRegisteredSchema(extType, normalizedExtName)) {
      if (this._registeredSchemas[extType].get(normalizedExtName) === schema) {
        return;
      }

      throw new SchemaNameConflictError(extType, extName);
    }

    this._ajv.validateSchema(schema, true);

    this._registeredSchemas[extType].set(normalizedExtName, schema);
  }

  getArgSpec(name, extType, extName) {
    return this._argSpecs.get(_argSpec.ArgSpec.toArg(name, extType, extName));
  }

  hasArgSpec(name, extType, extName) {
    return this._argSpecs.has(_argSpec.ArgSpec.toArg(name, extType, extName));
  }

  getDefaults(flatten = true) {
    if (!this.isFinalized()) {
      throw new SchemaFinalizationError();
    }

    const reducer = flatten ? (defaults, {
      defaultValue,
      dest
    }) => {
      if (!_lodash.default.isUndefined(defaultValue)) {
        defaults[dest] = defaultValue;
      }

      return defaults;
    } : (defaults, {
      defaultValue,
      dest
    }) => {
      if (!_lodash.default.isUndefined(defaultValue)) {
        _lodash.default.set(defaults, dest, defaultValue);
      }

      return defaults;
    };
    const retval = {};
    return [...this._argSpecs.values()].reduce(reducer, retval);
  }

  getDefaultsForExtension(extType, extName) {
    if (!this.isFinalized()) {
      throw new SchemaFinalizationError();
    }

    const specs = [...this._argSpecs.values()].filter(spec => spec.extType === extType && spec.extName === extName);
    return specs.reduce((defaults, {
      defaultValue,
      rawDest
    }) => {
      if (!_lodash.default.isUndefined(defaultValue)) {
        defaults[rawDest] = defaultValue;
      }

      return defaults;
    }, {});
  }

  flatten() {
    const schema = this.getSchema();
    const stack = [{
      properties: schema.properties,
      prefix: []
    }];
    const flattened = [];

    for (const {
      properties,
      prefix
    } of stack) {
      const pairs = _lodash.default.toPairs(properties);

      for (const [key, value] of pairs) {
        const {
          properties,
          $ref
        } = value;

        if (properties) {
          stack.push({
            properties,
            prefix: key === _argSpec.SERVER_PROP_NAME ? [] : [...prefix, key]
          });
        } else if ($ref) {
          let refSchema;

          try {
            refSchema = this.getSchema($ref);
          } catch (err) {
            throw new SchemaUnknownSchemaError($ref);
          }

          const {
            normalizedExtName
          } = _argSpec.ArgSpec.extensionInfoFromRootSchemaId($ref);

          if (!normalizedExtName) {
            throw new ReferenceError(`Could not determine extension name from schema ID ${$ref}. This is a bug.`);
          }

          stack.push({
            properties: refSchema.properties,
            prefix: [...prefix, key, normalizedExtName]
          });
        } else if (key !== _constants.DRIVER_TYPE && key !== _constants.PLUGIN_TYPE) {
          const [extType, extName] = prefix;
          const argSpec = this.getArgSpec(key, extType, extName);

          if (!argSpec) {
            throw new ReferenceError(`Unknown argument with key ${key}, extType ${extType} and extName ${extName}. This is a bug.`);
          }

          flattened.push({
            schema: _lodash.default.cloneDeep(value),
            argSpec
          });
        }
      }
    }

    return flattened;
  }

  getSchema(ref = _argSpec.APPIUM_CONFIG_SCHEMA_ID) {
    return this._getValidator(ref).schema;
  }

  _getValidator(id = _argSpec.APPIUM_CONFIG_SCHEMA_ID) {
    const validator = this._ajv.getSchema(id);

    if (!validator) {
      if (id === _argSpec.APPIUM_CONFIG_SCHEMA_ID) {
        throw new SchemaFinalizationError();
      } else {
        throw new SchemaUnknownSchemaError(id);
      }
    }

    return validator;
  }

  validate(value, ref = _argSpec.APPIUM_CONFIG_SCHEMA_ID) {
    const validator = this._getValidator(ref);

    return !validator(value) && _lodash.default.isArray(validator.errors) ? [...validator.errors] : [];
  }

  static isAllowedSchemaFileExtension(filename) {
    return ALLOWED_SCHEMA_EXTENSIONS.has(_path.default.extname(filename));
  }

  static isSupportedSchemaType(schema) {
    return _lodash.default.isPlainObject(schema) && schema.$async !== true;
  }

}

class SchemaFinalizationError extends Error {
  code = 'APPIUMERR_SCHEMA_FINALIZATION';

  constructor() {
    super('Schema not yet finalized; `finalize()` must be called first.');
  }

}

exports.SchemaFinalizationError = SchemaFinalizationError;

class SchemaNameConflictError extends Error {
  code = 'APPIUMERR_SCHEMA_NAME_CONFLICT';
  data;

  constructor(extType, extName) {
    super(`Name for ${extType} schema "${extName}" conflicts with an existing schema`);
    this.data = {
      extType,
      extName
    };
  }

}

exports.SchemaNameConflictError = SchemaNameConflictError;

class SchemaUnknownSchemaError extends ReferenceError {
  code = 'APPIUMERR_SCHEMA_UNKNOWN_SCHEMA';
  data;

  constructor(schemaId) {
    super(`Unknown schema: "${schemaId}"`);
    this.data = {
      schemaId
    };
  }

}

exports.SchemaUnknownSchemaError = SchemaUnknownSchemaError;

class SchemaUnsupportedSchemaError extends TypeError {
  code = 'APPIUMERR_SCHEMA_UNSUPPORTED_SCHEMA';
  data;

  constructor(schema, extType, extName) {
    super((() => {
      let msg = `Unsupported schema from ${extType} "${extName}":`;

      if (_lodash.default.isBoolean(schema)) {
        return `${msg} schema cannot be a boolean`;
      }

      if (_lodash.default.isPlainObject(schema)) {
        if (schema.$async) {
          return `${msg} schema cannot be an async schema`;
        }

        throw new TypeError(`schema IS supported; this error should not be thrown (this is a bug). value of schema: ${JSON.stringify(schema)}`);
      }

      return `${msg} schema must be a plain object without a true "$async" property`;
    })());
    this.data = {
      schema,
      extType,
      extName
    };
  }

}

exports.SchemaUnsupportedSchemaError = SchemaUnsupportedSchemaError;
const appiumSchema = AppiumSchema.create();
const {
  registerSchema,
  getAllArgSpecs,
  getArgSpec,
  hasArgSpec,
  isFinalized,
  finalize: finalizeSchema,
  reset: resetSchema,
  validate,
  getSchema,
  flatten: flattenSchema,
  getDefaults: getDefaultsForSchema,
  getDefaultsForExtension
} = appiumSchema;
exports.getDefaultsForExtension = getDefaultsForExtension;
exports.getDefaultsForSchema = getDefaultsForSchema;
exports.flattenSchema = flattenSchema;
exports.getSchema = getSchema;
exports.validate = validate;
exports.resetSchema = resetSchema;
exports.finalizeSchema = finalizeSchema;
exports.isFinalized = isFinalized;
exports.hasArgSpec = hasArgSpec;
exports.getArgSpec = getArgSpec;
exports.getAllArgSpecs = getAllArgSpecs;
exports.registerSchema = registerSchema;
const {
  isAllowedSchemaFileExtension
} = AppiumSchema;
exports.isAllowedSchemaFileExtension = isAllowedSchemaFileExtension;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,