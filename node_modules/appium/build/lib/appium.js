"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoDriverProxyCommandError = exports.AppiumDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _config = require("./config");

var _baseDriver = require("@appium/base-driver");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _utils = require("./utils");

var _support = require("@appium/support");

var _schema = require("./schema");

const desiredCapabilityConstraints = {
  automationName: {
    presence: true,
    isString: true
  },
  platformName: {
    presence: true,
    isString: true
  }
};
const sessionsListGuard = new _asyncLock.default();
const pendingDriversGuard = new _asyncLock.default();

class AppiumDriver extends _baseDriver.BaseDriver {
  constructor(args) {
    if (args.tmpDir) {
      process.env.APPIUM_TMP_DIR = args.tmpDir;
    }

    super(args);
    this.desiredCapConstraints = desiredCapabilityConstraints;
    this.newCommandTimeoutMs = 0;
    this.args = { ...args
    };
    this.sessions = {};
    this.pendingDrivers = {};
    this.pluginClasses = [];
    this.sessionPlugins = {};
    this.sessionlessPlugins = [];
    (0, _config.updateBuildInfo)();
  }

  get log() {
    if (!this._log) {
      const instanceName = `${this.constructor.name}@${_support.node.getObjectId(this).substring(0, 4)}`;
      this._log = _support.logger.getLogger(instanceName);
    }

    return this._log;
  }

  driverConfig;
  server;

  get isCommandsQueueEnabled() {
    return false;
  }

  sessionExists(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.sessionId !== null;
  }

  driverForSession(sessionId) {
    return this.sessions[sessionId];
  }

  async getStatus() {
    return {
      build: _lodash.default.clone((0, _config.getBuildInfo)())
    };
  }

  async getSessions() {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);
    return _lodash.default.toPairs(sessions).map(([id, driver]) => ({
      id,
      capabilities: driver.caps
    }));
  }

  printNewSessionAnnouncement(driverName, driverVersion, driverBaseVersion) {
    this.log.info(driverVersion ? `Appium v${_config.APPIUM_VER} creating new ${driverName} (v${driverVersion}) session` : `Appium v${_config.APPIUM_VER} creating new ${driverName} session`);
    this.log.info(`Checking BaseDriver versions for Appium and ${driverName}`);
    this.log.info(AppiumDriver.baseVersion ? `Appium's BaseDriver version is ${AppiumDriver.baseVersion}` : `Could not determine Appium's BaseDriver version`);
    this.log.info(driverBaseVersion ? `${driverName}'s BaseDriver version is ${driverBaseVersion}` : `Could not determine ${driverName}'s BaseDriver version`);
  }

  assignCliArgsToExtension(extType, extName, extInstance) {
    var _this$args$extType;

    const allCliArgsForExt = (_this$args$extType = this.args[extType]) === null || _this$args$extType === void 0 ? void 0 : _this$args$extType[extName];

    if (!_lodash.default.isEmpty(allCliArgsForExt)) {
      const defaults = (0, _schema.getDefaultsForExtension)(extType, extName);
      const cliArgs = _lodash.default.isEmpty(defaults) ? allCliArgsForExt : _lodash.default.omitBy(allCliArgsForExt, (value, key) => _lodash.default.isEqual(defaults[key], value));

      if (!_lodash.default.isEmpty(cliArgs)) {
        extInstance.cliArgs = cliArgs;
      }
    }
  }

  async createSession(jsonwpCaps, reqCaps, w3cCapabilities) {
    const defaultCapabilities = _lodash.default.cloneDeep(this.args.defaultCapabilities);

    const defaultSettings = (0, _utils.pullSettings)(defaultCapabilities);
    jsonwpCaps = _lodash.default.cloneDeep(jsonwpCaps);
    const jwpSettings = Object.assign({}, defaultSettings, (0, _utils.pullSettings)(jsonwpCaps));
    w3cCapabilities = _lodash.default.cloneDeep(w3cCapabilities);
    const w3cSettings = Object.assign({}, jwpSettings);
    Object.assign(w3cSettings, (0, _utils.pullSettings)((w3cCapabilities || {}).alwaysMatch || {}));

    for (const firstMatchEntry of (w3cCapabilities || {}).firstMatch || []) {
      Object.assign(w3cSettings, (0, _utils.pullSettings)(firstMatchEntry));
    }

    let protocol;
    let innerSessionId, dCaps;

    try {
      const parsedCaps = (0, _utils.parseCapsForInnerDriver)(jsonwpCaps, w3cCapabilities, this.desiredCapConstraints, defaultCapabilities);
      const {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        error
      } = parsedCaps;
      protocol = parsedCaps.protocol;

      if (error) {
        throw error;
      }

      const {
        driver: InnerDriver,
        version: driverVersion,
        driverName
      } = this.driverConfig.findMatchingDriver(desiredCaps);
      this.printNewSessionAnnouncement(InnerDriver.name, driverVersion, InnerDriver.baseVersion);

      if (this.args.sessionOverride) {
        await this.deleteAllSessions();
      }

      let runningDriversData, otherPendingDriversData;
      const driverInstance = new InnerDriver(this.args, true);

      if (this.args.relaxedSecurityEnabled) {
        this.log.info(`Applying relaxed security to '${InnerDriver.name}' as per ` + `server command line argument. All insecure features will be ` + `enabled unless explicitly disabled by --deny-insecure`);
        driverInstance.relaxedSecurityEnabled = true;
      }

      if (!_lodash.default.isEmpty(this.args.denyInsecure)) {
        this.log.info('Explicitly preventing use of insecure features:');
        this.args.denyInsecure.map(a => this.log.info(`    ${a}`));
        driverInstance.denyInsecure = this.args.denyInsecure;
      }

      if (!_lodash.default.isEmpty(this.args.allowInsecure)) {
        this.log.info('Explicitly enabling use of insecure features:');
        this.args.allowInsecure.map(a => this.log.info(`    ${a}`));
        driverInstance.allowInsecure = this.args.allowInsecure;
      }

      this.assignCliArgsToExtension('driver', driverName, driverInstance);
      driverInstance.server = this.server;
      driverInstance.serverHost = this.args.address;
      driverInstance.serverPort = this.args.port;
      driverInstance.serverPath = this.args.basePath;

      try {
        runningDriversData = await this.curSessionDataForDriver(InnerDriver);
      } catch (e) {
        throw new _baseDriver.errors.SessionNotCreatedError(e.message);
      }

      await pendingDriversGuard.acquire(AppiumDriver.name, () => {
        this.pendingDrivers[InnerDriver.name] = this.pendingDrivers[InnerDriver.name] || [];
        otherPendingDriversData = this.pendingDrivers[InnerDriver.name].map(drv => drv.driverData);
        this.pendingDrivers[InnerDriver.name].push(driverInstance);
      });

      try {
        [innerSessionId, dCaps] = await driverInstance.createSession(processedJsonwpCapabilities, reqCaps, processedW3CCapabilities, [...runningDriversData, ...otherPendingDriversData]);
        protocol = driverInstance.protocol;
        await sessionsListGuard.acquire(AppiumDriver.name, () => {
          this.sessions[innerSessionId] = driverInstance;
        });
      } finally {
        await pendingDriversGuard.acquire(AppiumDriver.name, () => {
          _lodash.default.pull(this.pendingDrivers[InnerDriver.name], driverInstance);
        });
      }

      this.attachUnexpectedShutdownHandler(driverInstance, innerSessionId);
      this.log.info(`New ${InnerDriver.name} session created successfully, session ` + `${innerSessionId} added to master session list`);
      driverInstance.startNewCommandTimeout();

      if (driverInstance.isW3CProtocol() && !_lodash.default.isEmpty(w3cSettings)) {
        this.log.info(`Applying the initial values to Appium settings parsed from W3C caps: ` + JSON.stringify(w3cSettings));
        await driverInstance.updateSettings(w3cSettings);
      } else if (driverInstance.isMjsonwpProtocol() && !_lodash.default.isEmpty(jwpSettings)) {
        this.log.info(`Applying the initial values to Appium settings parsed from MJSONWP caps: ` + JSON.stringify(jwpSettings));
        await driverInstance.updateSettings(jwpSettings);
      }
    } catch (error) {
      return {
        protocol,
        error
      };
    }

    return {
      protocol,
      value: [innerSessionId, dCaps, protocol]
    };
  }

  attachUnexpectedShutdownHandler(driver, innerSessionId) {
    const onShutdown = (cause = new Error('Unknown error')) => {
      this.log.warn(`Ending session, cause was '${cause.message}'`);

      if (this.sessionPlugins[innerSessionId]) {
        for (const plugin of this.sessionPlugins[innerSessionId]) {
          if (_lodash.default.isFunction(plugin.onUnexpectedShutdown)) {
            this.log.debug(`Plugin ${plugin.name} defines an unexpected shutdown handler; calling it now`);

            try {
              plugin.onUnexpectedShutdown(driver, cause);
            } catch (e) {
              this.log.warn(`Got an error when running plugin ${plugin.name} shutdown handler: ${e}`);
            }
          } else {
            this.log.debug(`Plugin ${plugin.name} does not define an unexpected shutdown handler`);
          }
        }
      }

      this.log.info(`Removing session '${innerSessionId}' from our master session list`);
      delete this.sessions[innerSessionId];
      delete this.sessionPlugins[innerSessionId];
    };

    if (_lodash.default.isFunction(driver.onUnexpectedShutdown)) {
      driver.onUnexpectedShutdown(onShutdown);
    } else {
      this.log.warn(`Failed to attach the unexpected shutdown listener. ` + `Is 'onUnexpectedShutdown' method available for '${driver.constructor.name}'?`);
    }
  }

  async curSessionDataForDriver(InnerDriver) {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);

    const data = _lodash.default.values(sessions).filter(s => s.constructor.name === InnerDriver.name).map(s => s.driverData);

    for (let datum of data) {
      if (!datum) {
        throw new Error(`Problem getting session data for driver type ` + `${InnerDriver.name}; does it implement 'get ` + `driverData'?`);
      }
    }

    return data;
  }

  async deleteSession(sessionId) {
    let protocol;

    try {
      let otherSessionsData = null;
      let dstSession = null;
      await sessionsListGuard.acquire(AppiumDriver.name, () => {
        if (!this.sessions[sessionId]) {
          return;
        }

        const curConstructorName = this.sessions[sessionId].constructor.name;
        otherSessionsData = _lodash.default.toPairs(this.sessions).filter(([key, value]) => value.constructor.name === curConstructorName && key !== sessionId).map(([, value]) => value.driverData);
        dstSession = this.sessions[sessionId];
        protocol = dstSession.protocol;
        this.log.info(`Removing session ${sessionId} from our master session list`);
        delete this.sessions[sessionId];
        delete this.sessionPlugins[sessionId];
      });
      return {
        protocol,
        value: await dstSession.deleteSession(sessionId, otherSessionsData)
      };
    } catch (e) {
      this.log.error(`Had trouble ending session ${sessionId}: ${e.message}`);
      return {
        protocol,
        error: e
      };
    }
  }

  async deleteAllSessions(opts = {}) {
    const sessionsCount = _lodash.default.size(this.sessions);

    if (0 === sessionsCount) {
      this.log.debug('There are no active sessions for cleanup');
      return;
    }

    const {
      force = false,
      reason
    } = opts;
    this.log.debug(`Cleaning up ${_support.util.pluralize('active session', sessionsCount, true)}`);
    const cleanupPromises = force ? _lodash.default.values(this.sessions).map(drv => drv.startUnexpectedShutdown(reason && new Error(reason))) : _lodash.default.keys(this.sessions).map(id => this.deleteSession(id));

    for (const cleanupPromise of cleanupPromises) {
      try {
        await cleanupPromise;
      } catch (e) {
        this.log.debug(e);
      }
    }
  }

  pluginsForSession(sessionId = null) {
    if (sessionId) {
      if (!this.sessionPlugins[sessionId]) {
        this.sessionPlugins[sessionId] = this.createPluginInstances();
      }

      return this.sessionPlugins[sessionId];
    }

    if (_lodash.default.isEmpty(this.sessionlessPlugins)) {
      this.sessionlessPlugins = this.createPluginInstances();
    }

    return this.sessionlessPlugins;
  }

  pluginsToHandleCmd(cmd, sessionId = null) {
    return this.pluginsForSession(sessionId).filter(p => _lodash.default.isFunction(p[cmd]) || _lodash.default.isFunction(p.handle));
  }

  createPluginInstances() {
    return this.pluginClasses.map(PluginClass => {
      const name = PluginClass.pluginName;
      const plugin = new PluginClass(name);
      this.assignCliArgsToExtension('plugin', name, plugin);
      return plugin;
    });
  }

  async executeCommand(cmd, ...args) {
    var _$last;

    const isGetStatus = cmd === _baseDriver.GET_STATUS_COMMAND;
    const isDeleteSession = cmd === _baseDriver.DELETE_SESSION_COMMAND;
    const isUmbrellaCmd = !isGetStatus && isAppiumDriverCommand(cmd);
    const isSessionCmd = !isUmbrellaCmd || isDeleteSession;
    const reqForProxy = (_$last = _lodash.default.last(args)) === null || _$last === void 0 ? void 0 : _$last.reqForProxy;

    if (reqForProxy) {
      args.pop();
    }

    let sessionId = null;
    let dstSession = null;
    let protocol = null;
    let driver = this;

    if (isSessionCmd) {
      sessionId = _lodash.default.last(args);
      dstSession = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions[sessionId]);

      if (!dstSession) {
        throw new Error(`The session with id '${sessionId}' does not exist`);
      }

      protocol = dstSession.protocol;

      if (!isUmbrellaCmd) {
        driver = dstSession;
      }
    }

    const plugins = this.pluginsToHandleCmd(cmd, sessionId);
    const cmdHandledBy = {
      default: false
    };

    const defaultBehavior = async () => {
      plugins.length && this.log.info(`Executing default handling behavior for command '${cmd}'`);
      cmdHandledBy.default = true;

      if (reqForProxy) {
        if (!dstSession.proxyCommand) {
          throw new NoDriverProxyCommandError();
        }

        return await dstSession.proxyCommand(reqForProxy.originalUrl, reqForProxy.method, reqForProxy.body);
      }

      if (isGetStatus) {
        return await this.getStatus();
      }

      if (isUmbrellaCmd) {
        return await super.executeCommand(cmd, ...args);
      }

      return await dstSession.executeCommand(cmd, ...args);
    };

    const wrappedCmd = this.wrapCommandWithPlugins({
      driver,
      cmd,
      args,
      plugins,
      cmdHandledBy,
      next: defaultBehavior
    });
    const res = await this.executeWrappedCommand({
      wrappedCmd,
      protocol
    });
    this.logPluginHandlerReport(plugins, {
      cmd,
      cmdHandledBy
    });

    if (cmd === _baseDriver.CREATE_SESSION_COMMAND && this.sessionlessPlugins.length && !res.error) {
      const sessionId = _lodash.default.first(res.value);

      this.log.info(`Promoting ${this.sessionlessPlugins.length} sessionless plugins to be attached ` + `to session ID ${sessionId}`);
      this.sessionPlugins[sessionId] = this.sessionlessPlugins;
      this.sessionlessPlugins = [];
    }

    return res;
  }

  wrapCommandWithPlugins({
    driver,
    cmd,
    args,
    next,
    cmdHandledBy,
    plugins
  }) {
    plugins.length && this.log.info(`Plugins which can handle cmd '${cmd}': ${plugins.map(p => p.name)}`);

    for (const plugin of plugins) {
      cmdHandledBy[plugin.name] = false;

      next = (_next => async () => {
        this.log.info(`Plugin ${plugin.name} is now handling cmd '${cmd}'`);
        cmdHandledBy[plugin.name] = true;

        if (plugin[cmd]) {
          return await plugin[cmd](_next, driver, ...args);
        }

        return await plugin.handle(_next, driver, cmd, ...args);
      })(next);
    }

    return next;
  }

  logPluginHandlerReport(plugins, {
    cmd,
    cmdHandledBy
  }) {
    if (!plugins.length) {
      return;
    }

    const didHandle = Object.keys(cmdHandledBy).filter(k => cmdHandledBy[k]);
    const didntHandle = Object.keys(cmdHandledBy).filter(k => !cmdHandledBy[k]);

    if (didntHandle.length > 0) {
      this.log.info(`Command '${cmd}' was *not* handled by the following behaviours or plugins, even ` + `though they were registered to handle it: ${JSON.stringify(didntHandle)}. The ` + `command *was* handled by these: ${JSON.stringify(didHandle)}.`);
    }
  }

  async executeWrappedCommand({
    wrappedCmd,
    protocol
  }) {
    let cmdRes,
        cmdErr,
        res = {};

    try {
      cmdRes = await wrappedCmd();
    } catch (e) {
      cmdErr = e;
    }

    if (_lodash.default.isPlainObject(cmdRes) && _lodash.default.has(cmdRes, 'protocol')) {
      res = cmdRes;
    } else {
      res.value = cmdRes;
      res.error = cmdErr;
      res.protocol = protocol;
    }

    return res;
  }

  proxyActive(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && _lodash.default.isFunction(dstSession.proxyActive) && dstSession.proxyActive(sessionId);
  }

  getProxyAvoidList(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession ? dstSession.getProxyAvoidList() : [];
  }

  canProxy(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.canProxy(sessionId);
  }

}

exports.AppiumDriver = AppiumDriver;

function isAppiumDriverCommand(cmd) {
  return !(0, _baseDriver.isSessionCommand)(cmd) || cmd === 'deleteSession';
}

class NoDriverProxyCommandError extends Error {
  code = 'APPIUMERR_NO_DRIVER_PROXYCOMMAND';

  constructor() {
    super(`The default behavior for this command was to proxy, but the driver ` + `did not have the 'proxyCommand' method defined. To fully support ` + `plugins, drivers should have 'proxyCommand' set to a jwpProxy object's ` + `'command()' method, in addition to the normal 'proxyReqRes'`);
  }

}

exports.NoDriverProxyCommandError = NoDriverProxyCommandError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9hcHBpdW0uanMiXSwibmFtZXMiOlsiZGVzaXJlZENhcGFiaWxpdHlDb25zdHJhaW50cyIsImF1dG9tYXRpb25OYW1lIiwicHJlc2VuY2UiLCJpc1N0cmluZyIsInBsYXRmb3JtTmFtZSIsInNlc3Npb25zTGlzdEd1YXJkIiwiQXN5bmNMb2NrIiwicGVuZGluZ0RyaXZlcnNHdWFyZCIsIkFwcGl1bURyaXZlciIsIkJhc2VEcml2ZXIiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJ0bXBEaXIiLCJwcm9jZXNzIiwiZW52IiwiQVBQSVVNX1RNUF9ESVIiLCJkZXNpcmVkQ2FwQ29uc3RyYWludHMiLCJuZXdDb21tYW5kVGltZW91dE1zIiwic2Vzc2lvbnMiLCJwZW5kaW5nRHJpdmVycyIsInBsdWdpbkNsYXNzZXMiLCJzZXNzaW9uUGx1Z2lucyIsInNlc3Npb25sZXNzUGx1Z2lucyIsImxvZyIsIl9sb2ciLCJpbnN0YW5jZU5hbWUiLCJuYW1lIiwibm9kZSIsImdldE9iamVjdElkIiwic3Vic3RyaW5nIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiZHJpdmVyQ29uZmlnIiwic2VydmVyIiwiaXNDb21tYW5kc1F1ZXVlRW5hYmxlZCIsInNlc3Npb25FeGlzdHMiLCJzZXNzaW9uSWQiLCJkc3RTZXNzaW9uIiwiZHJpdmVyRm9yU2Vzc2lvbiIsImdldFN0YXR1cyIsImJ1aWxkIiwiXyIsImNsb25lIiwiZ2V0U2Vzc2lvbnMiLCJhY3F1aXJlIiwidG9QYWlycyIsIm1hcCIsImlkIiwiZHJpdmVyIiwiY2FwYWJpbGl0aWVzIiwiY2FwcyIsInByaW50TmV3U2Vzc2lvbkFubm91bmNlbWVudCIsImRyaXZlck5hbWUiLCJkcml2ZXJWZXJzaW9uIiwiZHJpdmVyQmFzZVZlcnNpb24iLCJpbmZvIiwiQVBQSVVNX1ZFUiIsImJhc2VWZXJzaW9uIiwiYXNzaWduQ2xpQXJnc1RvRXh0ZW5zaW9uIiwiZXh0VHlwZSIsImV4dE5hbWUiLCJleHRJbnN0YW5jZSIsImFsbENsaUFyZ3NGb3JFeHQiLCJpc0VtcHR5IiwiZGVmYXVsdHMiLCJjbGlBcmdzIiwib21pdEJ5IiwidmFsdWUiLCJrZXkiLCJpc0VxdWFsIiwiY3JlYXRlU2Vzc2lvbiIsImpzb253cENhcHMiLCJyZXFDYXBzIiwidzNjQ2FwYWJpbGl0aWVzIiwiZGVmYXVsdENhcGFiaWxpdGllcyIsImNsb25lRGVlcCIsImRlZmF1bHRTZXR0aW5ncyIsImp3cFNldHRpbmdzIiwiT2JqZWN0IiwiYXNzaWduIiwidzNjU2V0dGluZ3MiLCJhbHdheXNNYXRjaCIsImZpcnN0TWF0Y2hFbnRyeSIsImZpcnN0TWF0Y2giLCJwcm90b2NvbCIsImlubmVyU2Vzc2lvbklkIiwiZENhcHMiLCJwYXJzZWRDYXBzIiwiZGVzaXJlZENhcHMiLCJwcm9jZXNzZWRKc29ud3BDYXBhYmlsaXRpZXMiLCJwcm9jZXNzZWRXM0NDYXBhYmlsaXRpZXMiLCJlcnJvciIsIklubmVyRHJpdmVyIiwidmVyc2lvbiIsImZpbmRNYXRjaGluZ0RyaXZlciIsInNlc3Npb25PdmVycmlkZSIsImRlbGV0ZUFsbFNlc3Npb25zIiwicnVubmluZ0RyaXZlcnNEYXRhIiwib3RoZXJQZW5kaW5nRHJpdmVyc0RhdGEiLCJkcml2ZXJJbnN0YW5jZSIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJkZW55SW5zZWN1cmUiLCJhIiwiYWxsb3dJbnNlY3VyZSIsInNlcnZlckhvc3QiLCJhZGRyZXNzIiwic2VydmVyUG9ydCIsInBvcnQiLCJzZXJ2ZXJQYXRoIiwiYmFzZVBhdGgiLCJjdXJTZXNzaW9uRGF0YUZvckRyaXZlciIsImUiLCJlcnJvcnMiLCJTZXNzaW9uTm90Q3JlYXRlZEVycm9yIiwibWVzc2FnZSIsImRydiIsImRyaXZlckRhdGEiLCJwdXNoIiwicHVsbCIsImF0dGFjaFVuZXhwZWN0ZWRTaHV0ZG93bkhhbmRsZXIiLCJzdGFydE5ld0NvbW1hbmRUaW1lb3V0IiwiaXNXM0NQcm90b2NvbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVTZXR0aW5ncyIsImlzTWpzb253cFByb3RvY29sIiwib25TaHV0ZG93biIsImNhdXNlIiwiRXJyb3IiLCJ3YXJuIiwicGx1Z2luIiwiaXNGdW5jdGlvbiIsIm9uVW5leHBlY3RlZFNodXRkb3duIiwiZGVidWciLCJkYXRhIiwidmFsdWVzIiwiZmlsdGVyIiwicyIsImRhdHVtIiwiZGVsZXRlU2Vzc2lvbiIsIm90aGVyU2Vzc2lvbnNEYXRhIiwiY3VyQ29uc3RydWN0b3JOYW1lIiwib3B0cyIsInNlc3Npb25zQ291bnQiLCJzaXplIiwiZm9yY2UiLCJyZWFzb24iLCJ1dGlsIiwicGx1cmFsaXplIiwiY2xlYW51cFByb21pc2VzIiwic3RhcnRVbmV4cGVjdGVkU2h1dGRvd24iLCJrZXlzIiwiY2xlYW51cFByb21pc2UiLCJwbHVnaW5zRm9yU2Vzc2lvbiIsImNyZWF0ZVBsdWdpbkluc3RhbmNlcyIsInBsdWdpbnNUb0hhbmRsZUNtZCIsImNtZCIsInAiLCJoYW5kbGUiLCJQbHVnaW5DbGFzcyIsInBsdWdpbk5hbWUiLCJleGVjdXRlQ29tbWFuZCIsImlzR2V0U3RhdHVzIiwiR0VUX1NUQVRVU19DT01NQU5EIiwiaXNEZWxldGVTZXNzaW9uIiwiREVMRVRFX1NFU1NJT05fQ09NTUFORCIsImlzVW1icmVsbGFDbWQiLCJpc0FwcGl1bURyaXZlckNvbW1hbmQiLCJpc1Nlc3Npb25DbWQiLCJyZXFGb3JQcm94eSIsImxhc3QiLCJwb3AiLCJwbHVnaW5zIiwiY21kSGFuZGxlZEJ5IiwiZGVmYXVsdCIsImRlZmF1bHRCZWhhdmlvciIsImxlbmd0aCIsInByb3h5Q29tbWFuZCIsIk5vRHJpdmVyUHJveHlDb21tYW5kRXJyb3IiLCJvcmlnaW5hbFVybCIsIm1ldGhvZCIsImJvZHkiLCJ3cmFwcGVkQ21kIiwid3JhcENvbW1hbmRXaXRoUGx1Z2lucyIsIm5leHQiLCJyZXMiLCJleGVjdXRlV3JhcHBlZENvbW1hbmQiLCJsb2dQbHVnaW5IYW5kbGVyUmVwb3J0IiwiQ1JFQVRFX1NFU1NJT05fQ09NTUFORCIsImZpcnN0IiwiX25leHQiLCJkaWRIYW5kbGUiLCJrIiwiZGlkbnRIYW5kbGUiLCJjbWRSZXMiLCJjbWRFcnIiLCJpc1BsYWluT2JqZWN0IiwiaGFzIiwicHJveHlBY3RpdmUiLCJnZXRQcm94eUF2b2lkTGlzdCIsImNhblByb3h5IiwiY29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSw0QkFBNEIsR0FBRztBQUNuQ0MsRUFBQUEsY0FBYyxFQUFFO0FBQ2RDLElBQUFBLFFBQVEsRUFBRSxJQURJO0FBRWRDLElBQUFBLFFBQVEsRUFBRTtBQUZJLEdBRG1CO0FBS25DQyxFQUFBQSxZQUFZLEVBQUU7QUFDWkYsSUFBQUEsUUFBUSxFQUFFLElBREU7QUFFWkMsSUFBQUEsUUFBUSxFQUFFO0FBRkU7QUFMcUIsQ0FBckM7QUFXQSxNQUFNRSxpQkFBaUIsR0FBRyxJQUFJQyxrQkFBSixFQUExQjtBQUNBLE1BQU1DLG1CQUFtQixHQUFHLElBQUlELGtCQUFKLEVBQTVCOztBQUVBLE1BQU1FLFlBQU4sU0FBMkJDLHNCQUEzQixDQUFzQztBQUNwQ0MsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVE7QUFLakIsUUFBSUEsSUFBSSxDQUFDQyxNQUFULEVBQWlCO0FBQ2ZDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxjQUFaLEdBQTZCSixJQUFJLENBQUNDLE1BQWxDO0FBQ0Q7O0FBRUQsVUFBTUQsSUFBTjtBQUVBLFNBQUtLLHFCQUFMLEdBQTZCaEIsNEJBQTdCO0FBR0EsU0FBS2lCLG1CQUFMLEdBQTJCLENBQTNCO0FBRUEsU0FBS04sSUFBTCxHQUFZLEVBQUMsR0FBR0E7QUFBSixLQUFaO0FBS0EsU0FBS08sUUFBTCxHQUFnQixFQUFoQjtBQUtBLFNBQUtDLGNBQUwsR0FBc0IsRUFBdEI7QUFHQSxTQUFLQyxhQUFMLEdBQXFCLEVBQXJCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQixFQUF0QjtBQUNBLFNBQUtDLGtCQUFMLEdBQTBCLEVBQTFCO0FB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V0FBT0MsVUFBVSxHQUFHQSxVQUFVLENBQUNrSyxpQkFBWCxFQUFILEdBQW9DLEVBQXJEO0FBQ0Q7O0FBRURDLEVBQUFBLFFBQVEsQ0FBRXBLLFNBQUYsRUFBYTtBQUNuQixVQUFNQyxVQUFVLEdBQUcsS0FBS25CLFFBQUwsQ0FBY2tCLFNBQWQsQ0FBbkI7QUFDQSxXQUFPQyxVQUFVLElBQUlBLFVBQVUsQ0FBQ21LLFFBQVgsQ0FBb0JwSyxTQUFwQixDQUFyQjtBQUNEOztBQWxuQm1DOzs7O0FBdW5CdEMsU0FBU21JLHFCQUFULENBQWdDWCxHQUFoQyxFQUFxQztBQUNuQyxTQUFPLENBQUMsa0NBQWlCQSxHQUFqQixDQUFELElBQTBCQSxHQUFHLEtBQUssZUFBekM7QUFDRDs7QUFNTSxNQUFNc0IseUJBQU4sU0FBd0NsRCxLQUF4QyxDQUE4QztBQUluRHlFLEVBQUFBLElBQUksR0FBRyxrQ0FBSDs7QUFFSi9MLEVBQUFBLFdBQVcsR0FBSTtBQUNiLFVBQU8scUVBQUQsR0FDQyxtRUFERCxHQUVDLHlFQUZELEdBR0MsNkRBSFA7QUFJRDs7QUFYa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZ2V0QnVpbGRJbmZvLCB1cGRhdGVCdWlsZEluZm8sIEFQUElVTV9WRVIgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBCYXNlRHJpdmVyLCBlcnJvcnMsIGlzU2Vzc2lvbkNvbW1hbmQsXG4gICAgICAgICBDUkVBVEVfU0VTU0lPTl9DT01NQU5ELCBERUxFVEVfU0VTU0lPTl9DT01NQU5ELCBHRVRfU1RBVFVTX0NPTU1BTkRcbn0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5pbXBvcnQgQXN5bmNMb2NrIGZyb20gJ2FzeW5jLWxvY2snO1xuaW1wb3J0IHsgcGFyc2VDYXBzRm9ySW5uZXJEcml2ZXIsIHB1bGxTZXR0aW5ncyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgdXRpbCwgbm9kZSwgbG9nZ2VyIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IGdldERlZmF1bHRzRm9yRXh0ZW5zaW9uIH0gZnJvbSAnLi9zY2hlbWEnO1xuXG5jb25zdCBkZXNpcmVkQ2FwYWJpbGl0eUNvbnN0cmFpbnRzID0ge1xuICBhdXRvbWF0aW9uTmFtZToge1xuICAgIHByZXNlbmNlOiB0cnVlLFxuICAgIGlzU3RyaW5nOiB0cnVlLFxuICB9LFxuICBwbGF0Zm9ybU5hbWU6IHtcbiAgICBwcmVzZW5jZTogdHJ1ZSxcbiAgICBpc1N0cmluZzogdHJ1ZSxcbiAgfSxcbn07XG5cbmNvbnN0IHNlc3Npb25zTGlzdEd1YXJkID0gbmV3IEFzeW5jTG9jaygpO1xuY29uc3QgcGVuZGluZ0RyaXZlcnNHdWFyZCA9IG5ldyBBc3luY0xvY2soKTtcblxuY2xhc3MgQXBwaXVtRHJpdmVyIGV4dGVuZHMgQmFzZURyaXZlciB7XG4gIGNvbnN0cnVjdG9yIChhcmdzKSB7XG4gICAgLy8gSXQgaXMgbmVjZXNzYXJ5IHRvIHNldCBgLS10bXBgIGhlcmUgc2luY2UgaXQgc2hvdWxkIGJlIHNldCB0b1xuICAgIC8vIHByb2Nlc3MuZW52LkFQUElVTV9UTVBfRElSIG9uY2UgYXQgYW4gaW5pdGlhbCBwb2ludCBpbiB0aGUgQXBwaXVtIGxpZmVjeWNsZS5cbiAgICAvLyBUaGUgcHJvY2VzcyBhcmd1bWVudCB3aWxsIGJlIHJlZmVyZW5jZWQgYnkgQmFzZURyaXZlci5cbiAgICAvLyBQbGVhc2UgY2FsbCBAYXBwaXVtL3N1cHBvcnQudGVtcERpciBtb2R1bGUgdG8gYXBwbHkgdGhpcyBiZW5lZml0LlxuICAgIGlmIChhcmdzLnRtcERpcikge1xuICAgICAgcHJvY2Vzcy5lbnYuQVBQSVVNX1RNUF9ESVIgPSBhcmdzLnRtcERpcjtcbiAgICB9XG5cbiAgICBzdXBlcihhcmdzKTtcblxuICAgIHRoaXMuZGVzaXJlZENhcENvbnN0cmFpbnRzID0gZGVzaXJlZENhcGFiaWxpdHlDb25zdHJhaW50cztcblxuICAgIC8vIHRoZSBtYWluIEFwcGl1bSBEcml2ZXIgaGFzIG5vIG5ldyBjb21tYW5kIHRpbWVvdXRcbiAgICB0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSAwO1xuXG4gICAgdGhpcy5hcmdzID0gey4uLmFyZ3N9O1xuXG4gICAgLy8gQWNjZXNzIHRvIHNlc3Npb25zIGxpc3QgbXVzdCBiZSBndWFyZGVkIHdpdGggYSBTZW1hcGhvcmUsIGJlY2F1c2VcbiAgICAvLyBpdCBtaWdodCBiZSBjaGFuZ2VkIGJ5IG90aGVyIGFzeW5jIGNhbGxzIGF0IGFueSB0aW1lXG4gICAgLy8gSXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIGFjY2VzcyB0aGlzIHByb3BlcnR5IGRpcmVjdGx5IGZyb20gdGhlIG91dHNpZGVcbiAgICB0aGlzLnNlc3Npb25zID0ge307XG5cbiAgICAvLyBBY2Nlc3MgdG8gcGVuZGluZyBkcml2ZXJzIGxpc3QgbXVzdCBiZSBndWFyZGVkIHdpdGggYSBTZW1hcGhvcmUsIGJlY2F1c2VcbiAgICAvLyBpdCBtaWdodCBiZSBjaGFuZ2VkIGJ5IG90aGVyIGFzeW5jIGNhbGxzIGF0IGFueSB0aW1lXG4gICAgLy8gSXQgaXMgbm90IHJlY29tbWVuZGVkIHRvIGFjY2VzcyB0aGlzIHByb3BlcnR5IGRpcmVjdGx5IGZyb20gdGhlIG91dHNpZGVcbiAgICB0aGlzLnBlbmRpbmdEcml2ZXJzID0ge307XG5cbiAgICAvKiogQHR5cGUge1BsdWdpbkV4dGVuc2lvbkNsYXNzW119ICovXG4gICAgdGhpcy5wbHVnaW5DbGFzc2VzID0gW107IC8vIGxpc3Qgb2Ygd2hpY2ggcGx1Z2lucyBhcmUgYWN0aXZlXG4gICAgdGhpcy5zZXNzaW9uUGx1Z2lucyA9IHt9OyAvLyBtYXAgb2Ygc2Vzc2lvbnMgdG8gYWN0dWFsIHBsdWdpbiBpbnN0YW5jZXMgcGVyIHNlc3Npb25cbiAgICB0aGlzLnNlc3Npb25sZXNzUGx1Z2lucyA9IFtdOyAvLyBzb21lIGNvbW1hbmRzIGFyZSBzZXNzaW9ubGVzcywgc28gd2UgbmVlZCBhIHNldCBvZiBwbHVnaW5zIGZvciB0aGVtXG5cbiAgICAvLyBhbGxvdyB0aGlzIHRvIGhhcHBlbiBpbiB0aGUgYmFja2dyb3VuZCwgc28gbm8gYGF3YWl0YFxuICAgIHVwZGF0ZUJ1aWxkSW5mbygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBsb2dnZXIgaW5zdGFuY2UgZm9yIHRoZSBjdXJyZW50IHVtYnJlbGxhIGRyaXZlciBpbnN0YW5jZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCBsb2cgKCkge1xuICAgIGlmICghdGhpcy5fbG9nKSB7XG4gICAgICBjb25zdCBpbnN0YW5jZU5hbWUgPSBgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9QCR7bm9kZS5nZXRPYmplY3RJZCh0aGlzKS5zdWJzdHJpbmcoMCwgNCl9YDtcbiAgICAgIHRoaXMuX2xvZyA9IGxvZ2dlci5nZXRMb2dnZXIoaW5zdGFuY2VOYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2xvZztcbiAgfVxuXG4gIC8qKiBAdHlwZSB7aW1wb3J0KCcuL2V4dGVuc2lvbi9kcml2ZXItY29uZmlnJykuRHJpdmVyQ29uZmlnfHVuZGVmaW5lZH0gKi9cbiAgZHJpdmVyQ29uZmlnO1xuXG4gIC8qKiBAdHlwZSB7aW1wb3J0KCdleHByZXNzJykuRXhwcmVzc3x1bmRlZmluZWR9ICovXG4gIHNlcnZlcjtcblxuICAvKipcbiAgICogQ2FuY2VsIGNvbW1hbmRzIHF1ZXVlaW5nIGZvciB0aGUgdW1icmVsbGEgQXBwaXVtIGRyaXZlclxuICAgKi9cbiAgZ2V0IGlzQ29tbWFuZHNRdWV1ZUVuYWJsZWQgKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNlc3Npb25FeGlzdHMgKHNlc3Npb25JZCkge1xuICAgIGNvbnN0IGRzdFNlc3Npb24gPSB0aGlzLnNlc3Npb25zW3Nlc3Npb25JZF07XG4gICAgcmV0dXJuIGRzdFNlc3Npb24gJiYgZHN0U2Vzc2lvbi5zZXNzaW9uSWQgIT09IG51bGw7XG4gIH1cblxuICBkcml2ZXJGb3JTZXNzaW9uIChzZXNzaW9uSWQpIHtcbiAgICByZXR1cm4gdGhpcy5zZXNzaW9uc1tzZXNzaW9uSWRdO1xuICB9XG5cbiAgYXN5bmMgZ2V0U3RhdHVzICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgcmV0dXJuIHtcbiAgICAgIGJ1aWxkOiBfLmNsb25lKGdldEJ1aWxkSW5mbygpKSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZ2V0U2Vzc2lvbnMgKCkge1xuICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgc2Vzc2lvbnNMaXN0R3VhcmQuYWNxdWlyZShBcHBpdW1Ecml2ZXIubmFtZSwgKCkgPT4gdGhpcy5zZXNzaW9ucyk7XG4gICAgcmV0dXJuIF8udG9QYWlycyhzZXNzaW9ucylcbiAgICAgIC5tYXAoKFtpZCwgZHJpdmVyXSkgPT4gKHtpZCwgY2FwYWJpbGl0aWVzOiBkcml2ZXIuY2Fwc30pKTtcbiAgfVxuXG4gIHByaW50TmV3U2Vzc2lvbkFubm91bmNlbWVudCAoZHJpdmVyTmFtZSwgZHJpdmVyVmVyc2lvbiwgZHJpdmVyQmFzZVZlcnNpb24pIHtcbiAgICB0aGlzLmxvZy5pbmZvKGRyaXZlclZlcnNpb25cbiAgICAgID8gYEFwcGl1bSB2JHtBUFBJVU1fVkVSfSBjcmVhdGluZyBuZXcgJHtkcml2ZXJOYW1lfSAodiR7ZHJpdmVyVmVyc2lvbn0pIHNlc3Npb25gXG4gICAgICA6IGBBcHBpdW0gdiR7QVBQSVVNX1ZFUn0gY3JlYXRpbmcgbmV3ICR7ZHJpdmVyTmFtZX0gc2Vzc2lvbmBcbiAgICApO1xuICAgIHRoaXMubG9nLmluZm8oYENoZWNraW5nIEJhc2VEcml2ZXIgdmVyc2lvbnMgZm9yIEFwcGl1bSBhbmQgJHtkcml2ZXJOYW1lfWApO1xuICAgIHRoaXMubG9nLmluZm8oQXBwaXVtRHJpdmVyLmJhc2VWZXJzaW9uXG4gICAgICA/IGBBcHBpdW0ncyBCYXNlRHJpdmVyIHZlcnNpb24gaXMgJHtBcHBpdW1Ecml2ZXIuYmFzZVZlcnNpb259YFxuICAgICAgOiBgQ291bGQgbm90IGRldGVybWluZSBBcHBpdW0ncyBCYXNlRHJpdmVyIHZlcnNpb25gXG4gICAgKTtcbiAgICB0aGlzLmxvZy5pbmZvKGRyaXZlckJhc2VWZXJzaW9uXG4gICAgICA/IGAke2RyaXZlck5hbWV9J3MgQmFzZURyaXZlciB2ZXJzaW9uIGlzICR7ZHJpdmVyQmFzZVZlcnNpb259YFxuICAgICAgOiBgQ291bGQgbm90IGRldGVybWluZSAke2RyaXZlck5hbWV9J3MgQmFzZURyaXZlciB2ZXJzaW9uYFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgYW5kIGFzc2lnbiBDTEkgYXJncyBmb3IgYSBkcml2ZXIgb3IgcGx1Z2luXG4gICAqXG4gICAqIElmIHRoZSBleHRlbnNpb24gaGFzIHByb3ZpZGVkIGEgc2NoZW1hLCB2YWxpZGF0aW9uIGhhcyBhbHJlYWR5IGhhcHBlbmVkLlxuICAgKlxuICAgKiBBbnkgYXJnIHdoaWNoIGlzIGVxdWFsIHRvIGl0cyBkZWZhdWx0IHZhbHVlIHdpbGwgbm90IGJlIGFzc2lnbmVkIHRvIHRoZSBleHRlbnNpb24uXG4gICAqIEBwYXJhbSB7aW1wb3J0KCcuL21hbmlmZXN0JykuRXh0ZW5zaW9uVHlwZX0gZXh0VHlwZSAnZHJpdmVyJyBvciAncGx1Z2luJ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXh0TmFtZSB0aGUgbmFtZSBvZiB0aGUgZXh0ZW5zaW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBleHRJbnN0YW5jZSB0aGUgZHJpdmVyIG9yIHBsdWdpbiBpbnN0YW5jZVxuICAgKi9cbiAgYXNzaWduQ2xpQXJnc1RvRXh0ZW5zaW9uIChleHRUeXBlLCBleHROYW1lLCBleHRJbnN0YW5jZSkge1xuICAgIGNvbnN0IGFsbENsaUFyZ3NGb3JFeHQgPSB0aGlzLmFyZ3NbZXh0VHlwZV0/LltleHROYW1lXTtcbiAgICBpZiAoIV8uaXNFbXB0eShhbGxDbGlBcmdzRm9yRXh0KSkge1xuICAgICAgY29uc3QgZGVmYXVsdHMgPSBnZXREZWZhdWx0c0ZvckV4dGVuc2lvbihleHRUeXBlLCBleHROYW1lKTtcbiAgICAgIGNvbnN0IGNsaUFyZ3MgPSBfLmlzRW1wdHkoZGVmYXVsdHMpXG4gICAgICAgID8gYWxsQ2xpQXJnc0ZvckV4dFxuICAgICAgICA6IF8ub21pdEJ5KGFsbENsaUFyZ3NGb3JFeHQsICh2YWx1ZSwga2V5KSA9PiBfLmlzRXF1YWwoZGVmYXVsdHNba2V5XSwgdmFsdWUpKTtcbiAgICAgIGlmICghXy5pc0VtcHR5KGNsaUFyZ3MpKSB7XG4gICAgICAgIGV4dEluc3RhbmNlLmNsaUFyZ3MgPSBjbGlBcmdzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgc2Vzc2lvblxuICAgKiBAcGFyYW0ge09iamVjdH0ganNvbndwQ2FwcyBKU09OV1AgZm9ybWF0dGVkIGRlc2lyZWQgY2FwYWJpbGl0aWVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSByZXFDYXBzIFJlcXVpcmVkIGNhcGFiaWxpdGllcyAoSlNPTldQIHN0YW5kYXJkKVxuICAgKiBAcGFyYW0ge09iamVjdH0gdzNjQ2FwYWJpbGl0aWVzIFczQyBjYXBhYmlsaXRpZXNcbiAgICogQHJldHVybiB7QXJyYXl9IFVuaXF1ZSBzZXNzaW9uIElEIGFuZCBjYXBhYmlsaXRpZXNcbiAgICovXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24gKGpzb253cENhcHMsIHJlcUNhcHMsIHczY0NhcGFiaWxpdGllcykge1xuICAgIGNvbnN0IGRlZmF1bHRDYXBhYmlsaXRpZXMgPSBfLmNsb25lRGVlcCh0aGlzLmFyZ3MuZGVmYXVsdENhcGFiaWxpdGllcyk7XG4gICAgY29uc3QgZGVmYXVsdFNldHRpbmdzID0gcHVsbFNldHRpbmdzKGRlZmF1bHRDYXBhYmlsaXRpZXMpO1xuICAgIGpzb253cENhcHMgPSBfLmNsb25lRGVlcChqc29ud3BDYXBzKTtcbiAgICBjb25zdCBqd3BTZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRTZXR0aW5ncywgcHVsbFNldHRpbmdzKGpzb253cENhcHMpKTtcbiAgICB3M2NDYXBhYmlsaXRpZXMgPSBfLmNsb25lRGVlcCh3M2NDYXBhYmlsaXRpZXMpO1xuICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRoYXQgdGhlIGNsaWVudCBvbmx5IHByb3ZpZGVzIGNhcHMgdXNpbmcgSlNPTldQIHN0YW5kYXJkLFxuICAgIC8vIGFsdGhvdWdoIGZpcnN0TWF0Y2gvYWx3YXlzTWF0Y2ggcHJvcGVydGllcyBhcmUgc3RpbGwgcHJlc2VudC5cbiAgICAvLyBJbiBzdWNoIGNhc2Ugd2UgYXNzdW1lIHRoZSBjbGllbnQgdW5kZXJzdGFuZHMgVzNDIHByb3RvY29sIGFuZCBtZXJnZSB0aGUgZ2l2ZW5cbiAgICAvLyBKU09OV1AgY2FwcyB0byBXM0MgY2Fwc1xuICAgIGNvbnN0IHczY1NldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgandwU2V0dGluZ3MpO1xuICAgIE9iamVjdC5hc3NpZ24odzNjU2V0dGluZ3MsIHB1bGxTZXR0aW5ncygodzNjQ2FwYWJpbGl0aWVzIHx8IHt9KS5hbHdheXNNYXRjaCB8fCB7fSkpO1xuICAgIGZvciAoY29uc3QgZmlyc3RNYXRjaEVudHJ5IG9mICgodzNjQ2FwYWJpbGl0aWVzIHx8IHt9KS5maXJzdE1hdGNoIHx8IFtdKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbih3M2NTZXR0aW5ncywgcHVsbFNldHRpbmdzKGZpcnN0TWF0Y2hFbnRyeSkpO1xuICAgIH1cblxuICAgIGxldCBwcm90b2NvbDtcbiAgICBsZXQgaW5uZXJTZXNzaW9uSWQsIGRDYXBzO1xuICAgIHRyeSB7XG4gICAgICAvLyBQYXJzZSB0aGUgY2FwcyBpbnRvIGEgZm9ybWF0IHRoYXQgdGhlIElubmVyRHJpdmVyIHdpbGwgYWNjZXB0XG4gICAgICBjb25zdCBwYXJzZWRDYXBzID0gcGFyc2VDYXBzRm9ySW5uZXJEcml2ZXIoXG4gICAgICAgIGpzb253cENhcHMsXG4gICAgICAgIHczY0NhcGFiaWxpdGllcyxcbiAgICAgICAgdGhpcy5kZXNpcmVkQ2FwQ29uc3RyYWludHMsXG4gICAgICAgIGRlZmF1bHRDYXBhYmlsaXRpZXNcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHtkZXNpcmVkQ2FwcywgcHJvY2Vzc2VkSnNvbndwQ2FwYWJpbGl0aWVzLCBwcm9jZXNzZWRXM0NDYXBhYmlsaXRpZXMsIGVycm9yfSA9IHBhcnNlZENhcHM7XG4gICAgICBwcm90b2NvbCA9IHBhcnNlZENhcHMucHJvdG9jb2w7XG5cbiAgICAgIC8vIElmIHRoZSBwYXJzaW5nIG9mIHRoZSBjYXBzIHByb2R1Y2VkIGFuIGVycm9yLCB0aHJvdyBpdCBpbiBoZXJlXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZHJpdmVyOiBJbm5lckRyaXZlcixcbiAgICAgICAgdmVyc2lvbjogZHJpdmVyVmVyc2lvbixcbiAgICAgICAgZHJpdmVyTmFtZVxuICAgICAgfSA9IHRoaXMuZHJpdmVyQ29uZmlnLmZpbmRNYXRjaGluZ0RyaXZlcihkZXNpcmVkQ2Fwcyk7XG4gICAgICB0aGlzLnByaW50TmV3U2Vzc2lvbkFubm91bmNlbWVudChJbm5lckRyaXZlci5uYW1lLCBkcml2ZXJWZXJzaW9uLCBJbm5lckRyaXZlci5iYXNlVmVyc2lvbik7XG5cbiAgICAgIGlmICh0aGlzLmFyZ3Muc2Vzc2lvbk92ZXJyaWRlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlQWxsU2Vzc2lvbnMoKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJ1bm5pbmdEcml2ZXJzRGF0YSwgb3RoZXJQZW5kaW5nRHJpdmVyc0RhdGE7XG5cbiAgICAgIGNvbnN0IGRyaXZlckluc3RhbmNlID0gbmV3IElubmVyRHJpdmVyKHRoaXMuYXJncywgdHJ1ZSk7XG5cbiAgICAgIC8vIFdlIHdhbnQgdG8gYXNzaWduIHNlY3VyaXR5IHZhbHVlcyBkaXJlY3RseSBvbiB0aGUgZHJpdmVyLiBUaGUgZHJpdmVyXG4gICAgICAvLyBzaG91bGQgbm90IHJlYWQgc2VjdXJpdHkgdmFsdWVzIGZyb20gYHRoaXMub3B0c2AgYmVjYXVzZSB0aG9zZSB2YWx1ZXNcbiAgICAgIC8vIGNvdWxkIGhhdmUgYmVlbiBzZXQgYnkgYSBtYWxpY2lvdXMgdXNlciB2aWEgY2FwYWJpbGl0aWVzLCB3aGVyZWFzIHdlXG4gICAgICAvLyB3YW50IGEgZ3VhcmFudGVlIHRoZSB2YWx1ZXMgd2VyZSBzZXQgYnkgdGhlIGFwcGl1bSBzZXJ2ZXIgYWRtaW5cbiAgICAgIGlmICh0aGlzLmFyZ3MucmVsYXhlZFNlY3VyaXR5RW5hYmxlZCkge1xuICAgICAgICB0aGlzLmxvZy5pbmZvKGBBcHBseWluZyByZWxheGVkIHNlY3VyaXR5IHRvICcke0lubmVyRHJpdmVyLm5hbWV9JyBhcyBwZXIgYCArXG4gICAgICAgICAgYHNlcnZlciBjb21tYW5kIGxpbmUgYXJndW1lbnQuIEFsbCBpbnNlY3VyZSBmZWF0dXJlcyB3aWxsIGJlIGAgK1xuICAgICAgICAgIGBlbmFibGVkIHVubGVzcyBleHBsaWNpdGx5IGRpc2FibGVkIGJ5IC0tZGVueS1pbnNlY3VyZWApO1xuICAgICAgICBkcml2ZXJJbnN0YW5jZS5yZWxheGVkU2VjdXJpdHlFbmFibGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfLmlzRW1wdHkodGhpcy5hcmdzLmRlbnlJbnNlY3VyZSkpIHtcbiAgICAgICAgdGhpcy5sb2cuaW5mbygnRXhwbGljaXRseSBwcmV2ZW50aW5nIHVzZSBvZiBpbnNlY3VyZSBmZWF0dXJlczonKTtcbiAgICAgICAgdGhpcy5hcmdzLmRlbnlJbnNlY3VyZS5tYXAoKGEpID0+IHRoaXMubG9nLmluZm8oYCAgICAke2F9YCkpO1xuICAgICAgICBkcml2ZXJJbnN0YW5jZS5kZW55SW5zZWN1cmUgPSB0aGlzLmFyZ3MuZGVueUluc2VjdXJlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV8uaXNFbXB0eSh0aGlzLmFyZ3MuYWxsb3dJbnNlY3VyZSkpIHtcbiAgICAgICAgdGhpcy5sb2cuaW5mbygnRXhwbGljaXRseSBlbmFibGluZyB1c2Ugb2YgaW5zZWN1cmUgZmVhdHVyZXM6Jyk7XG4gICAgICAgIHRoaXMuYXJncy5hbGxvd0luc2VjdXJlLm1hcCgoYSkgPT4gdGhpcy5sb2cuaW5mbyhgICAgICR7YX1gKSk7XG4gICAgICAgIGRyaXZlckluc3RhbmNlLmFsbG93SW5zZWN1cmUgPSB0aGlzLmFyZ3MuYWxsb3dJbnNlY3VyZTtcbiAgICAgIH1cblxuICAgICAgLy8gTGlrZXdpc2UsIGFueSBkcml2ZXItc3BlY2lmaWMgQ0xJIGFyZ3MgdGhhdCB3ZXJlIHBhc3NlZCBpbiBzaG91bGQgYmUgYXNzaWduZWQgZGlyZWN0bHkgdG9cbiAgICAgIC8vIHRoZSBkcml2ZXIgc28gdGhhdCB0aGV5IGNhbm5vdCBiZSBtaW1pY2tlZCBieSBhIG1hbGljaW91cyB1c2VyIHNlbmRpbmcgaW4gY2FwYWJpbGl0aWVzXG4gICAgICB0aGlzLmFzc2lnbkNsaUFyZ3NUb0V4dGVuc2lvbignZHJpdmVyJywgZHJpdmVyTmFtZSwgZHJpdmVySW5zdGFuY2UpO1xuXG5cbiAgICAgIC8vIFRoaXMgYXNzaWdubWVudCBpcyByZXF1aXJlZCBmb3IgY29ycmVjdCB3ZWIgc29ja2V0cyBmdW5jdGlvbmFsaXR5IGluc2lkZSB0aGUgZHJpdmVyXG4gICAgICBkcml2ZXJJbnN0YW5jZS5zZXJ2ZXIgPSB0aGlzLnNlcnZlcjtcblxuICAgICAgLy8gRHJpdmVycy9wbHVnaW5zIG1pZ2h0IGFsc28gd2FudCB0byBrbm93IHdoZXJlIHRoZXkgYXJlIGhvc3RlZFxuICAgICAgZHJpdmVySW5zdGFuY2Uuc2VydmVySG9zdCA9IHRoaXMuYXJncy5hZGRyZXNzO1xuICAgICAgZHJpdmVySW5zdGFuY2Uuc2VydmVyUG9ydCA9IHRoaXMuYXJncy5wb3J0O1xuICAgICAgZHJpdmVySW5zdGFuY2Uuc2VydmVyUGF0aCA9IHRoaXMuYXJncy5iYXNlUGF0aDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcnVubmluZ0RyaXZlcnNEYXRhID0gYXdhaXQgdGhpcy5jdXJTZXNzaW9uRGF0YUZvckRyaXZlcihJbm5lckRyaXZlcik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuU2Vzc2lvbk5vdENyZWF0ZWRFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgYXdhaXQgcGVuZGluZ0RyaXZlcnNHdWFyZC5hY3F1aXJlKEFwcGl1bURyaXZlci5uYW1lLCAoKSA9PiB7XG4gICAgICAgIHRoaXMucGVuZGluZ0RyaXZlcnNbSW5uZXJEcml2ZXIubmFtZV0gPSB0aGlzLnBlbmRpbmdEcml2ZXJzW0lubmVyRHJpdmVyLm5hbWVdIHx8IFtdO1xuICAgICAgICBvdGhlclBlbmRpbmdEcml2ZXJzRGF0YSA9IHRoaXMucGVuZGluZ0RyaXZlcnNbSW5uZXJEcml2ZXIubmFtZV0ubWFwKChkcnYpID0+IGRydi5kcml2ZXJEYXRhKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nRHJpdmVyc1tJbm5lckRyaXZlci5uYW1lXS5wdXNoKGRyaXZlckluc3RhbmNlKTtcbiAgICAgIH0pO1xuXG4gICAgICB0cnkge1xuICAgICAgICBbaW5uZXJTZXNzaW9uSWQsIGRDYXBzXSA9IGF3YWl0IGRyaXZlckluc3RhbmNlLmNyZWF0ZVNlc3Npb24oXG4gICAgICAgICAgcHJvY2Vzc2VkSnNvbndwQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgIHJlcUNhcHMsXG4gICAgICAgICAgcHJvY2Vzc2VkVzNDQ2FwYWJpbGl0aWVzLFxuICAgICAgICAgIFsuLi5ydW5uaW5nRHJpdmVyc0RhdGEsIC4uLm90aGVyUGVuZGluZ0RyaXZlcnNEYXRhXVxuICAgICAgICApO1xuICAgICAgICBwcm90b2NvbCA9IGRyaXZlckluc3RhbmNlLnByb3RvY29sO1xuICAgICAgICBhd2FpdCBzZXNzaW9uc0xpc3RHdWFyZC5hY3F1aXJlKEFwcGl1bURyaXZlci5uYW1lLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zZXNzaW9uc1tpbm5lclNlc3Npb25JZF0gPSBkcml2ZXJJbnN0YW5jZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCBwZW5kaW5nRHJpdmVyc0d1YXJkLmFjcXVpcmUoQXBwaXVtRHJpdmVyLm5hbWUsICgpID0+IHtcbiAgICAgICAgICBfLnB1bGwodGhpcy5wZW5kaW5nRHJpdmVyc1tJbm5lckRyaXZlci5uYW1lXSwgZHJpdmVySW5zdGFuY2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hdHRhY2hVbmV4cGVjdGVkU2h1dGRvd25IYW5kbGVyKGRyaXZlckluc3RhbmNlLCBpbm5lclNlc3Npb25JZCk7XG5cbiAgICAgIHRoaXMubG9nLmluZm8oYE5ldyAke0lubmVyRHJpdmVyLm5hbWV9IHNlc3Npb24gY3JlYXRlZCBzdWNjZXNzZnVsbHksIHNlc3Npb24gYCArXG4gICAgICAgIGAke2lubmVyU2Vzc2lvbklkfSBhZGRlZCB0byBtYXN0ZXIgc2Vzc2lvbiBsaXN0YCk7XG5cbiAgICAgIC8vIHNldCB0aGUgTmV3IENvbW1hbmQgVGltZW91dCBmb3IgdGhlIGlubmVyIGRyaXZlclxuICAgICAgZHJpdmVySW5zdGFuY2Uuc3RhcnROZXdDb21tYW5kVGltZW91dCgpO1xuXG4gICAgICAvLyBhcHBseSBpbml0aWFsIHZhbHVlcyB0byBBcHBpdW0gc2V0dGluZ3MgKGlmIHByb3ZpZGVkKVxuICAgICAgaWYgKGRyaXZlckluc3RhbmNlLmlzVzNDUHJvdG9jb2woKSAmJiAhXy5pc0VtcHR5KHczY1NldHRpbmdzKSkge1xuICAgICAgICB0aGlzLmxvZy5pbmZvKGBBcHBseWluZyB0aGUgaW5pdGlhbCB2YWx1ZXMgdG8gQXBwaXVtIHNldHRpbmdzIHBhcnNlZCBmcm9tIFczQyBjYXBzOiBgICtcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh3M2NTZXR0aW5ncykpO1xuICAgICAgICBhd2FpdCBkcml2ZXJJbnN0YW5jZS51cGRhdGVTZXR0aW5ncyh3M2NTZXR0aW5ncyk7XG4gICAgICB9IGVsc2UgaWYgKGRyaXZlckluc3RhbmNlLmlzTWpzb253cFByb3RvY29sKCkgJiYgIV8uaXNFbXB0eShqd3BTZXR0aW5ncykpIHtcbiAgICAgICAgdGhpcy5sb2cuaW5mbyhgQXBwbHlpbmcgdGhlIGluaXRpYWwgdmFsdWVzIHRvIEFwcGl1bSBzZXR0aW5ncyBwYXJzZWQgZnJvbSBNSlNPTldQIGNhcHM6IGAgK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGp3cFNldHRpbmdzKSk7XG4gICAgICAgIGF3YWl0IGRyaXZlckluc3RhbmNlLnVwZGF0ZVNldHRpbmdzKGp3cFNldHRpbmdzKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgIGVycm9yLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHJvdG9jb2wsXG4gICAgICB2YWx1ZTogW2lubmVyU2Vzc2lvbklkLCBkQ2FwcywgcHJvdG9jb2xdXG4gICAgfTtcbiAgfVxuXG4gIGF0dGFjaFVuZXhwZWN0ZWRTaHV0ZG93bkhhbmRsZXIgKGRyaXZlciwgaW5uZXJTZXNzaW9uSWQpIHtcbiAgICBjb25zdCBvblNodXRkb3duID0gKGNhdXNlID0gbmV3IEVycm9yKCdVbmtub3duIGVycm9yJykpID0+IHtcbiAgICAgIHRoaXMubG9nLndhcm4oYEVuZGluZyBzZXNzaW9uLCBjYXVzZSB3YXMgJyR7Y2F1c2UubWVzc2FnZX0nYCk7XG5cbiAgICAgIGlmICh0aGlzLnNlc3Npb25QbHVnaW5zW2lubmVyU2Vzc2lvbklkXSkge1xuICAgICAgICBmb3IgKGNvbnN0IHBsdWdpbiBvZiB0aGlzLnNlc3Npb25QbHVnaW5zW2lubmVyU2Vzc2lvbklkXSkge1xuICAgICAgICAgIGlmIChfLmlzRnVuY3Rpb24ocGx1Z2luLm9uVW5leHBlY3RlZFNodXRkb3duKSkge1xuICAgICAgICAgICAgdGhpcy5sb2cuZGVidWcoYFBsdWdpbiAke3BsdWdpbi5uYW1lfSBkZWZpbmVzIGFuIHVuZXhwZWN0ZWQgc2h1dGRvd24gaGFuZGxlcjsgY2FsbGluZyBpdCBub3dgKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHBsdWdpbi5vblVuZXhwZWN0ZWRTaHV0ZG93bihkcml2ZXIsIGNhdXNlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5sb2cud2FybihgR290IGFuIGVycm9yIHdoZW4gcnVubmluZyBwbHVnaW4gJHtwbHVnaW4ubmFtZX0gc2h1dGRvd24gaGFuZGxlcjogJHtlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZyhgUGx1Z2luICR7cGx1Z2luLm5hbWV9IGRvZXMgbm90IGRlZmluZSBhbiB1bmV4cGVjdGVkIHNodXRkb3duIGhhbmRsZXJgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2cuaW5mbyhgUmVtb3Zpbmcgc2Vzc2lvbiAnJHtpbm5lclNlc3Npb25JZH0nIGZyb20gb3VyIG1hc3RlciBzZXNzaW9uIGxpc3RgKTtcbiAgICAgIGRlbGV0ZSB0aGlzLnNlc3Npb25zW2lubmVyU2Vzc2lvbklkXTtcbiAgICAgIGRlbGV0ZSB0aGlzLnNlc3Npb25QbHVnaW5zW2lubmVyU2Vzc2lvbklkXTtcbiAgICB9O1xuXG4gICAgaWYgKF8uaXNGdW5jdGlvbihkcml2ZXIub25VbmV4cGVjdGVkU2h1dGRvd24pKSB7XG4gICAgICBkcml2ZXIub25VbmV4cGVjdGVkU2h1dGRvd24ob25TaHV0ZG93bik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nLndhcm4oYEZhaWxlZCB0byBhdHRhY2ggdGhlIHVuZXhwZWN0ZWQgc2h1dGRvd24gbGlzdGVuZXIuIGAgK1xuICAgICAgICBgSXMgJ29uVW5leHBlY3RlZFNodXRkb3duJyBtZXRob2QgYXZhaWxhYmxlIGZvciAnJHtkcml2ZXIuY29uc3RydWN0b3IubmFtZX0nP2ApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGN1clNlc3Npb25EYXRhRm9yRHJpdmVyIChJbm5lckRyaXZlcikge1xuICAgIGNvbnN0IHNlc3Npb25zID0gYXdhaXQgc2Vzc2lvbnNMaXN0R3VhcmQuYWNxdWlyZShBcHBpdW1Ecml2ZXIubmFtZSwgKCkgPT4gdGhpcy5zZXNzaW9ucyk7XG4gICAgY29uc3QgZGF0YSA9IF8udmFsdWVzKHNlc3Npb25zKVxuICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHMpID0+IHMuY29uc3RydWN0b3IubmFtZSA9PT0gSW5uZXJEcml2ZXIubmFtZSlcbiAgICAgICAgICAgICAgICAgICAubWFwKChzKSA9PiBzLmRyaXZlckRhdGEpO1xuICAgIGZvciAobGV0IGRhdHVtIG9mIGRhdGEpIHtcbiAgICAgIGlmICghZGF0dW0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9ibGVtIGdldHRpbmcgc2Vzc2lvbiBkYXRhIGZvciBkcml2ZXIgdHlwZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke0lubmVyRHJpdmVyLm5hbWV9OyBkb2VzIGl0IGltcGxlbWVudCAnZ2V0IGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYGRyaXZlckRhdGEnP2ApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKHNlc3Npb25JZCkge1xuICAgIGxldCBwcm90b2NvbDtcbiAgICB0cnkge1xuICAgICAgbGV0IG90aGVyU2Vzc2lvbnNEYXRhID0gbnVsbDtcbiAgICAgIGxldCBkc3RTZXNzaW9uID0gbnVsbDtcbiAgICAgIGF3YWl0IHNlc3Npb25zTGlzdEd1YXJkLmFjcXVpcmUoQXBwaXVtRHJpdmVyLm5hbWUsICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLnNlc3Npb25zW3Nlc3Npb25JZF0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VyQ29uc3RydWN0b3JOYW1lID0gdGhpcy5zZXNzaW9uc1tzZXNzaW9uSWRdLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIG90aGVyU2Vzc2lvbnNEYXRhID0gXy50b1BhaXJzKHRoaXMuc2Vzc2lvbnMpXG4gICAgICAgICAgICAgIC5maWx0ZXIoKFtrZXksIHZhbHVlXSkgPT4gdmFsdWUuY29uc3RydWN0b3IubmFtZSA9PT0gY3VyQ29uc3RydWN0b3JOYW1lICYmIGtleSAhPT0gc2Vzc2lvbklkKVxuICAgICAgICAgICAgICAubWFwKChbLCB2YWx1ZV0pID0+IHZhbHVlLmRyaXZlckRhdGEpO1xuICAgICAgICBkc3RTZXNzaW9uID0gdGhpcy5zZXNzaW9uc1tzZXNzaW9uSWRdO1xuICAgICAgICBwcm90b2NvbCA9IGRzdFNlc3Npb24ucHJvdG9jb2w7XG4gICAgICAgIHRoaXMubG9nLmluZm8oYFJlbW92aW5nIHNlc3Npb24gJHtzZXNzaW9uSWR9IGZyb20gb3VyIG1hc3RlciBzZXNzaW9uIGxpc3RgKTtcbiAgICAgICAgLy8gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZSBkZWxldGVTZXNzaW9uIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkgb3Igbm90XG4gICAgICAgIC8vIG1ha2UgdGhlIHNlc3Npb24gdW5hdmFpbGFibGUsIGJlY2F1c2Ugd2hvIGtub3dzIHdoYXQgc3RhdGUgaXQgbWlnaHRcbiAgICAgICAgLy8gYmUgaW4gb3RoZXJ3aXNlXG4gICAgICAgIGRlbGV0ZSB0aGlzLnNlc3Npb25zW3Nlc3Npb25JZF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNlc3Npb25QbHVnaW5zW3Nlc3Npb25JZF07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb3RvY29sLFxuICAgICAgICB2YWx1ZTogYXdhaXQgZHN0U2Vzc2lvbi5kZWxldGVTZXNzaW9uKHNlc3Npb25JZCwgb3RoZXJTZXNzaW9uc0RhdGEpLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLmxvZy5lcnJvcihgSGFkIHRyb3VibGUgZW5kaW5nIHNlc3Npb24gJHtzZXNzaW9uSWR9OiAke2UubWVzc2FnZX1gKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByb3RvY29sLFxuICAgICAgICBlcnJvcjogZSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlQWxsU2Vzc2lvbnMgKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHNlc3Npb25zQ291bnQgPSBfLnNpemUodGhpcy5zZXNzaW9ucyk7XG4gICAgaWYgKDAgPT09IHNlc3Npb25zQ291bnQpIHtcbiAgICAgIHRoaXMubG9nLmRlYnVnKCdUaGVyZSBhcmUgbm8gYWN0aXZlIHNlc3Npb25zIGZvciBjbGVhbnVwJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgZm9yY2UgPSBmYWxzZSxcbiAgICAgIHJlYXNvbixcbiAgICB9ID0gb3B0cztcbiAgICB0aGlzLmxvZy5kZWJ1ZyhgQ2xlYW5pbmcgdXAgJHt1dGlsLnBsdXJhbGl6ZSgnYWN0aXZlIHNlc3Npb24nLCBzZXNzaW9uc0NvdW50LCB0cnVlKX1gKTtcbiAgICBjb25zdCBjbGVhbnVwUHJvbWlzZXMgPSBmb3JjZVxuICAgICAgPyBfLnZhbHVlcyh0aGlzLnNlc3Npb25zKS5tYXAoKGRydikgPT4gZHJ2LnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKHJlYXNvbiAmJiBuZXcgRXJyb3IocmVhc29uKSkpXG4gICAgICA6IF8ua2V5cyh0aGlzLnNlc3Npb25zKS5tYXAoKGlkKSA9PiB0aGlzLmRlbGV0ZVNlc3Npb24oaWQpKTtcbiAgICBmb3IgKGNvbnN0IGNsZWFudXBQcm9taXNlIG9mIGNsZWFudXBQcm9taXNlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2xlYW51cFByb21pc2U7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMubG9nLmRlYnVnKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFwcHJvcHJpYXRlIHBsdWdpbnMgZm9yIGEgc2Vzc2lvbiAob3Igc2Vzc2lvbmxlc3MgcGx1Z2lucylcbiAgICpcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBzZXNzaW9uSWQgLSB0aGUgc2Vzc2lvbklkIChvciBudWxsKSB0byB1c2UgdG8gZmluZCBwbHVnaW5zXG4gICAqIEByZXR1cm5zIHtBcnJheX0gLSBhcnJheSBvZiBwbHVnaW4gaW5zdGFuY2VzXG4gICAqL1xuICBwbHVnaW5zRm9yU2Vzc2lvbiAoc2Vzc2lvbklkID0gbnVsbCkge1xuICAgIGlmIChzZXNzaW9uSWQpIHtcbiAgICAgIGlmICghdGhpcy5zZXNzaW9uUGx1Z2luc1tzZXNzaW9uSWRdKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvblBsdWdpbnNbc2Vzc2lvbklkXSA9IHRoaXMuY3JlYXRlUGx1Z2luSW5zdGFuY2VzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zZXNzaW9uUGx1Z2luc1tzZXNzaW9uSWRdO1xuICAgIH1cblxuICAgIGlmIChfLmlzRW1wdHkodGhpcy5zZXNzaW9ubGVzc1BsdWdpbnMpKSB7XG4gICAgICB0aGlzLnNlc3Npb25sZXNzUGx1Z2lucyA9IHRoaXMuY3JlYXRlUGx1Z2luSW5zdGFuY2VzKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNlc3Npb25sZXNzUGx1Z2lucztcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyBnZXQgcGx1Z2lucyBmb3IgYSBjb21tYW5kLCB3ZSBlaXRoZXIgZ2V0IHRoZSBwbHVnaW4gaW5zdGFuY2VzIGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICogcGFydGljdWxhciBjb21tYW5kJ3Mgc2Vzc2lvbiwgb3IgaW4gdGhlIGNhc2Ugb2Ygc2Vzc2lvbmxlc3MgcGx1Z2lucywgcHVsbCBmcm9tIHRoZSBzZXQgb2ZcbiAgICogcGx1Z2luIGluc3RhbmNlcyByZXNlcnZlZCBmb3Igc2Vzc2lvbmxlc3MgY29tbWFuZHMgKGFuZCB3ZSBsYXppbHkgY3JlYXRlIHBsdWdpbiBpbnN0YW5jZXMgb25cbiAgICogZmlyc3QgdXNlKVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY21kIC0gdGhlIG5hbWUgb2YgdGhlIGNvbW1hbmQgdG8gZmluZCBhIHBsdWdpbiB0byBoYW5kbGVcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBzZXNzaW9uSWQgLSB0aGUgcGFydGljdWxhciBzZXNzaW9uIGZvciB3aGljaCB0byBmaW5kIGEgcGx1Z2luLCBvciBudWxsIGlmXG4gICAqIHNlc3Npb25sZXNzXG4gICAqL1xuICBwbHVnaW5zVG9IYW5kbGVDbWQgKGNtZCwgc2Vzc2lvbklkID0gbnVsbCkge1xuICAgIC8vIHRvIGhhbmRsZSBhIGdpdmVuIGNvbW1hbmQsIGEgcGx1Z2luIHNob3VsZCBlaXRoZXIgaW1wbGVtZW50IHRoYXQgY29tbWFuZCBhcyBhIHBsdWdpblxuICAgIC8vIGluc3RhbmNlIG1ldGhvZCBvciBpdCBzaG91bGQgaW1wbGVtZW50IGEgZ2VuZXJpYyAnaGFuZGxlJyBtZXRob2RcbiAgICByZXR1cm4gdGhpcy5wbHVnaW5zRm9yU2Vzc2lvbihzZXNzaW9uSWQpXG4gICAgICAuZmlsdGVyKChwKSA9PiBfLmlzRnVuY3Rpb24ocFtjbWRdKSB8fCBfLmlzRnVuY3Rpb24ocC5oYW5kbGUpKTtcbiAgfVxuXG4gIGNyZWF0ZVBsdWdpbkluc3RhbmNlcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGx1Z2luQ2xhc3Nlcy5tYXAoKFBsdWdpbkNsYXNzKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gUGx1Z2luQ2xhc3MucGx1Z2luTmFtZTtcbiAgICAgIGNvbnN0IHBsdWdpbiA9IG5ldyBQbHVnaW5DbGFzcyhuYW1lKTtcbiAgICAgIHRoaXMuYXNzaWduQ2xpQXJnc1RvRXh0ZW5zaW9uKCdwbHVnaW4nLCBuYW1lLCBwbHVnaW4pO1xuICAgICAgcmV0dXJuIHBsdWdpbjtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjbWQsIC4uLmFyZ3MpIHtcbiAgICAvLyBXZSBoYXZlIGJhc2ljYWxseSB0aHJlZSBjYXNlcyBmb3IgaG93IHRvIGhhbmRsZSBjb21tYW5kczpcbiAgICAvLyAxLiBoYW5kbGUgZ2V0U3RhdHVzICh3ZSBkbyB0aGlzIGFzIGEgc3BlY2lhbCBvdXQgb2YgYmFuZCBjYXNlIHNvIGl0IGRvZXNuJ3QgZ2V0IGFkZGVkIHRvIGFuXG4gICAgLy8gICAgZXhlY3V0aW9uIHF1ZXVlLCBhbmQgY2FuIGJlIGNhbGxlZCB3aGlsZSBlLmcuIGNyZWF0ZVNlc3Npb24gaXMgaW4gcHJvZ3Jlc3MpXG4gICAgLy8gMi4gaGFuZGxlIGNvbW1hbmRzIHRoYXQgdGhpcyB1bWJyZWxsYSBkcml2ZXIgc2hvdWxkIGhhbmRsZSwgcmF0aGVyIHRoYW4gdGhlIGFjdHVhbCBzZXNzaW9uXG4gICAgLy8gICAgZHJpdmVyIChmb3IgZXhhbXBsZSwgZGVsZXRlU2Vzc2lvbiwgb3Igb3RoZXIgbm9uLXNlc3Npb24gY29tbWFuZHMpXG4gICAgLy8gMy4gaGFuZGxlIHNlc3Npb24gZHJpdmVyIGNvbW1hbmRzLlxuICAgIC8vIFRoZSB0cmlja3kgcGFydCBpcyB0aGF0IGJlY2F1c2Ugd2Ugc3VwcG9ydCBjb21tYW5kIHBsdWdpbnMsIHdlIG5lZWQgdG8gd3JhcCBhbnkgb2YgdGhlc2VcbiAgICAvLyBjYXNlcyB3aXRoIHBsdWdpbiBoYW5kbGluZy5cblxuICAgIGNvbnN0IGlzR2V0U3RhdHVzID0gY21kID09PSBHRVRfU1RBVFVTX0NPTU1BTkQ7XG4gICAgY29uc3QgaXNEZWxldGVTZXNzaW9uID0gY21kID09PSBERUxFVEVfU0VTU0lPTl9DT01NQU5EO1xuICAgIGNvbnN0IGlzVW1icmVsbGFDbWQgPSAhaXNHZXRTdGF0dXMgJiYgaXNBcHBpdW1Ecml2ZXJDb21tYW5kKGNtZCk7XG4gICAgY29uc3QgaXNTZXNzaW9uQ21kID0gIWlzVW1icmVsbGFDbWQgfHwgaXNEZWxldGVTZXNzaW9uO1xuXG4gICAgLy8gaWYgYSBwbHVnaW4gb3ZlcnJpZGUgcHJveHlpbmcgZm9yIHRoaXMgY29tbWFuZCBhbmQgdGhhdCBpcyB3aHkgd2UgYXJlIGhlcmUgaW5zdGVhZCBvZiBqdXN0XG4gICAgLy8gbGV0dGluZyB0aGUgcHJvdG9jb2wgcHJveHkgdGhlIGNvbW1hbmQgZW50aXJlbHksIGRldGVybWluZSB0aGF0LCBnZXQgdGhlIHJlcXVlc3Qgb2JqZWN0IGZvclxuICAgIC8vIHVzZSBsYXRlciBvbiwgdGhlbiBjbGVhbiB1cCB0aGUgYXJnc1xuICAgIGNvbnN0IHJlcUZvclByb3h5ID0gXy5sYXN0KGFyZ3MpPy5yZXFGb3JQcm94eTtcbiAgICBpZiAocmVxRm9yUHJveHkpIHtcbiAgICAgIGFyZ3MucG9wKCk7XG4gICAgfVxuXG5cbiAgICAvLyBmaXJzdCBkbyBzb21lIGVycm9yIGNoZWNraW5nLiBJZiB3ZSdyZSByZXF1ZXN0aW5nIGEgc2Vzc2lvbiBjb21tYW5kIGV4ZWN1dGlvbiwgdGhlbiBtYWtlXG4gICAgLy8gc3VyZSB0aGF0IHNlc3Npb24gYWN0dWFsbHkgZXhpc3RzIG9uIHRoZSBzZXNzaW9uIGRyaXZlciwgYW5kIHNldCB0aGUgc2Vzc2lvbiBkcml2ZXIgaXRzZWxmXG4gICAgbGV0IHNlc3Npb25JZCA9IG51bGw7XG4gICAgbGV0IGRzdFNlc3Npb24gPSBudWxsO1xuICAgIGxldCBwcm90b2NvbCA9IG51bGw7XG4gICAgbGV0IGRyaXZlciA9IHRoaXM7XG4gICAgaWYgKGlzU2Vzc2lvbkNtZCkge1xuICAgICAgc2Vzc2lvbklkID0gXy5sYXN0KGFyZ3MpO1xuICAgICAgZHN0U2Vzc2lvbiA9IGF3YWl0IHNlc3Npb25zTGlzdEd1YXJkLmFjcXVpcmUoQXBwaXVtRHJpdmVyLm5hbWUsICgpID0+IHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklkXSk7XG4gICAgICBpZiAoIWRzdFNlc3Npb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgc2Vzc2lvbiB3aXRoIGlkICcke3Nlc3Npb25JZH0nIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgICB9XG4gICAgICAvLyBub3cgc2F2ZSB0aGUgcmVzcG9uc2UgcHJvdG9jb2wgZ2l2ZW4gdGhhdCB0aGUgc2Vzc2lvbiBkcml2ZXIncyBwcm90b2NvbCBtaWdodCBkaWZmZXJcbiAgICAgIHByb3RvY29sID0gZHN0U2Vzc2lvbi5wcm90b2NvbDtcbiAgICAgIGlmICghaXNVbWJyZWxsYUNtZCkge1xuICAgICAgICBkcml2ZXIgPSBkc3RTZXNzaW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGdldCBhbnkgcGx1Z2lucyB3aGljaCBhcmUgcmVnaXN0ZXJlZCBhcyBoYW5kbGluZyB0aGlzIGNvbW1hbmRcbiAgICBjb25zdCBwbHVnaW5zID0gdGhpcy5wbHVnaW5zVG9IYW5kbGVDbWQoY21kLCBzZXNzaW9uSWQpO1xuXG4gICAgLy8gbm93IHdlIGRlZmluZSBhICdjbWRIYW5kbGVkQnknIG9iamVjdCB3aGljaCB3aWxsIGtlZXAgdHJhY2sgb2Ygd2hpY2ggcGx1Z2lucyBoYXZlIGhhbmRsZWQgdGhpc1xuICAgIC8vIGNvbW1hbmQuIHdlIGNhcmUgYWJvdXQgdGhpcyBiZWNhdXNlIChhKSBtdWx0aXBsZSBwbHVnaW5zIGNhbiBoYW5kbGUgdGhlIHNhbWUgY29tbWFuZCwgYW5kXG4gICAgLy8gKGIpIHRoZXJlJ3Mgbm8gZ3VhcmFudGVlIHRoYXQgYSBwbHVnaW4gd2lsbCBhY3R1YWxseSBjYWxsIHRoZSBuZXh0KCkgbWV0aG9kIHdoaWNoIHJ1bnMgdGhlXG4gICAgLy8gb3JpZ2luYWwgY29tbWFuZCBleGVjdXRpb24uIFRoaXMgcmVzdWx0cyBpbiBhIHNpdHVhdGlvbiB3aGVyZSB0aGUgY29tbWFuZCBtaWdodCBiZSBoYW5kbGVkXG4gICAgLy8gYnkgc29tZSBidXQgbm90IGFsbCBwbHVnaW5zLCBvciBieSBwbHVnaW4ocykgYnV0IG5vdCBieSB0aGUgZGVmYXVsdCBiZWhhdmlvci4gU28gc3RhcnQgb3V0XG4gICAgLy8gdGhpcyBvYmplY3QgZGVjbGFyaW5nIHRoYXQgdGhlIGRlZmF1bHQgaGFuZGxlciBoYXMgbm90IGJlZW4gZXhlY3V0ZWQuXG4gICAgY29uc3QgY21kSGFuZGxlZEJ5ID0ge2RlZmF1bHQ6IGZhbHNlfTtcblxuICAgIC8vIG5vdyB3ZSBkZWZpbmUgYW4gYXN5bmMgZnVuY3Rpb24gd2hpY2ggd2lsbCBiZSBwYXNzZWQgdG8gcGx1Z2lucywgYW5kIHN1Y2Nlc3NpdmVseSB3cmFwcGVkXG4gICAgLy8gaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBwbHVnaW4gdGhhdCBjYW4gaGFuZGxlIHRoZSBjb21tYW5kLiBUbyBzdGFydCBvZmYgd2l0aCwgdGhlIGFzeW5jXG4gICAgLy8gZnVuY3Rpb24gaXMgZGVmaW5lZCBhcyBjYWxsaW5nIHRoZSBkZWZhdWx0IGJlaGF2aW9yLCBpLmUuLCB3aGljaGV2ZXIgb2YgdGhlIDMgY2FzZXMgYWJvdmUgaXNcbiAgICAvLyB0aGUgYXBwcm9wcmlhdGUgb25lXG4gICAgY29uc3QgZGVmYXVsdEJlaGF2aW9yID0gYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gaWYgd2UncmUgcnVubmluZyB3aXRoIHBsdWdpbnMsIG1ha2Ugc3VyZSB3ZSBsb2cgdGhhdCB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyBhY3R1YWxseVxuICAgICAgLy8gaGFwcGVuaW5nIHNvIHdlIGNhbiB0ZWxsIHdoZW4gdGhlIHBsdWdpbiBjYWxsIGNoYWluIGlzIHVud3JhcHBpbmcgdG8gdGhlIGRlZmF1bHQgYmVoYXZpb3JcbiAgICAgIC8vIGlmIHRoYXQncyB3aGF0IGhhcHBlbnNcbiAgICAgIHBsdWdpbnMubGVuZ3RoICYmIHRoaXMubG9nLmluZm8oYEV4ZWN1dGluZyBkZWZhdWx0IGhhbmRsaW5nIGJlaGF2aW9yIGZvciBjb21tYW5kICcke2NtZH0nYCk7XG5cbiAgICAgIC8vIGlmIHdlIG1ha2UgaXQgaGVyZSwgd2Uga25vdyB0aGF0IHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIGhhbmRsZWRcbiAgICAgIGNtZEhhbmRsZWRCeS5kZWZhdWx0ID0gdHJ1ZTtcblxuICAgICAgaWYgKHJlcUZvclByb3h5KSB7XG4gICAgICAgIC8vIHdlIHdvdWxkIGhhdmUgcHJveGllZCB0aGlzIGNvbW1hbmQgaGFkIGEgcGx1Z2luIG5vdCBoYW5kbGVkIGl0LCBzbyB0aGUgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICAvLyBpcyB0byBkbyB0aGUgcHJveHkgYW5kIHJldHJpZXZlIHRoZSByZXN1bHQgaW50ZXJuYWxseSBzbyBpdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBwbHVnaW5cbiAgICAgICAgLy8gaW4gY2FzZSBpdCBjYWxscyAnYXdhaXQgbmV4dCgpJy4gVGhpcyByZXF1aXJlcyB0aGF0IHRoZSBkcml2ZXIgaGF2ZSBkZWZpbmVkXG4gICAgICAgIC8vICdwcm94eUNvbW1hbmQnIGFuZCBub3QganVzdCAncHJveHlSZXFSZXMnLlxuICAgICAgICBpZiAoIWRzdFNlc3Npb24ucHJveHlDb21tYW5kKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE5vRHJpdmVyUHJveHlDb21tYW5kRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgZHN0U2Vzc2lvbi5wcm94eUNvbW1hbmQocmVxRm9yUHJveHkub3JpZ2luYWxVcmwsIHJlcUZvclByb3h5Lm1ldGhvZCxcbiAgICAgICAgICByZXFGb3JQcm94eS5ib2R5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzR2V0U3RhdHVzKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFN0YXR1cygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNVbWJyZWxsYUNtZCkge1xuICAgICAgICAvLyBzb21lIGNvbW1hbmRzLCBsaWtlIGRlbGV0ZVNlc3Npb24sIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHRvIGhhbmRsZSBvbiAqdGhpcyogZHJpdmVyLFxuICAgICAgICAvLyBub3QgdGhlIHBsYXRmb3JtIGRyaXZlclxuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoY21kLCAuLi5hcmdzKTtcbiAgICAgIH1cblxuICAgICAgLy8gaGVyZSB3ZSBrbm93IHRoYXQgd2UgYXJlIGV4ZWN1dGluZyBhIHNlc3Npb24gY29tbWFuZCwgYW5kIGhhdmUgYSB2YWxpZCBzZXNzaW9uIGRyaXZlclxuICAgICAgcmV0dXJuIGF3YWl0IGRzdFNlc3Npb24uZXhlY3V0ZUNvbW1hbmQoY21kLCAuLi5hcmdzKTtcbiAgICB9O1xuXG4gICAgLy8gbm93IHRha2Ugb3VyIGRlZmF1bHQgYmVoYXZpb3IsIHdyYXAgaXQgd2l0aCBhbnkgbnVtYmVyIG9mIHBsdWdpbiBiZWhhdmlvcnMsIGFuZCBydW4gaXRcbiAgICBjb25zdCB3cmFwcGVkQ21kID0gdGhpcy53cmFwQ29tbWFuZFdpdGhQbHVnaW5zKHtcbiAgICAgIGRyaXZlciwgY21kLCBhcmdzLCBwbHVnaW5zLCBjbWRIYW5kbGVkQnksIG5leHQ6IGRlZmF1bHRCZWhhdmlvclxuICAgIH0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZXhlY3V0ZVdyYXBwZWRDb21tYW5kKHt3cmFwcGVkQ21kLCBwcm90b2NvbH0pO1xuXG4gICAgLy8gaWYgd2UgaGFkIHBsdWdpbnMsIG1ha2Ugc3VyZSB0byBsb2cgb3V0IHRoZSBoZWxwZnVsIHJlcG9ydCBhYm91dCB3aGljaCBwbHVnaW5zIGVuZGVkIHVwXG4gICAgLy8gaGFuZGxpbmcgdGhlIGNvbW1hbmQgYW5kIHdoaWNoIGRpZG4ndFxuICAgIHRoaXMubG9nUGx1Z2luSGFuZGxlclJlcG9ydChwbHVnaW5zLCB7Y21kLCBjbWRIYW5kbGVkQnl9KTtcblxuICAgIC8vIEFuZCBmaW5hbGx5LCBpZiB0aGUgY29tbWFuZCB3YXMgY3JlYXRlU2Vzc2lvbiwgd2Ugd2FudCB0byBtaWdyYXRlIGFueSBwbHVnaW5zIHdoaWNoIHdlcmVcbiAgICAvLyBwcmV2aW91c2x5IHNlc3Npb25sZXNzIHRvIHVzZSB0aGUgbmV3IHNlc3Npb25JZCwgc28gdGhhdCBwbHVnaW5zIGNhbiBzaGFyZSBzdGF0ZSBiZXR3ZWVuXG4gICAgLy8gdGhlaXIgY3JlYXRlU2Vzc2lvbiBtZXRob2QgYW5kIG90aGVyIGluc3RhbmNlIG1ldGhvZHNcbiAgICBpZiAoY21kID09PSBDUkVBVEVfU0VTU0lPTl9DT01NQU5EICYmIHRoaXMuc2Vzc2lvbmxlc3NQbHVnaW5zLmxlbmd0aCAmJiAhcmVzLmVycm9yKSB7XG4gICAgICBjb25zdCBzZXNzaW9uSWQgPSBfLmZpcnN0KHJlcy52YWx1ZSk7XG4gICAgICB0aGlzLmxvZy5pbmZvKGBQcm9tb3RpbmcgJHt0aGlzLnNlc3Npb25sZXNzUGx1Z2lucy5sZW5ndGh9IHNlc3Npb25sZXNzIHBsdWdpbnMgdG8gYmUgYXR0YWNoZWQgYCArXG4gICAgICAgIGB0byBzZXNzaW9uIElEICR7c2Vzc2lvbklkfWApO1xuICAgICAgdGhpcy5zZXNzaW9uUGx1Z2luc1tzZXNzaW9uSWRdID0gdGhpcy5zZXNzaW9ubGVzc1BsdWdpbnM7XG4gICAgICB0aGlzLnNlc3Npb25sZXNzUGx1Z2lucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICB3cmFwQ29tbWFuZFdpdGhQbHVnaW5zICh7ZHJpdmVyLCBjbWQsIGFyZ3MsIG5leHQsIGNtZEhhbmRsZWRCeSwgcGx1Z2luc30pIHtcbiAgICBwbHVnaW5zLmxlbmd0aCAmJiB0aGlzLmxvZy5pbmZvKGBQbHVnaW5zIHdoaWNoIGNhbiBoYW5kbGUgY21kICcke2NtZH0nOiAke3BsdWdpbnMubWFwKChwKSA9PiBwLm5hbWUpfWApO1xuXG4gICAgLy8gbm93IHdlIGNhbiBnbyB0aHJvdWdoIGVhY2ggcGx1Z2luIGFuZCB3cmFwIGBuZXh0YCBhcm91bmQgaXRzIG93biBoYW5kbGVyLCBwYXNzaW5nIHRoZSAqb2xkKlxuICAgIC8vIG5leHQgaW4gc28gdGhhdCBpdCBjYW4gY2FsbCBpdCBpZiBpdCB3YW50cyB0b1xuICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHBsdWdpbnMpIHtcbiAgICAgIC8vIG5lZWQgYW4gSUlGRSBoZXJlIGJlY2F1c2Ugd2Ugd2FudCB0aGUgdmFsdWUgb2YgbmV4dCB0aGF0J3MgcGFzc2VkIHRvIHBsdWdpbi5oYW5kbGUgdG8gYmVcbiAgICAgIC8vIGV4YWN0bHkgdGhlIHZhbHVlIG9mIG5leHQgaGVyZSBiZWZvcmUgcmVhc3NpZ25tZW50OyB3ZSBkb24ndCB3YW50IGl0IHRvIGJlIGxhemlseVxuICAgICAgLy8gZXZhbHVhdGVkLCBvdGhlcndpc2Ugd2UgZW5kIHVwIHdpdGggaW5maW5pdGUgcmVjdXJzaW9uIG9mIHRoZSBsYXN0IGBuZXh0YCB0byBiZSBkZWZpbmVkLlxuICAgICAgY21kSGFuZGxlZEJ5W3BsdWdpbi5uYW1lXSA9IGZhbHNlOyAvLyB3ZSBzZWUgYSBuZXcgcGx1Z2luLCBzbyBhZGQgaXQgdG8gdGhlICdjbWRIYW5kbGVkQnknIG9iamVjdFxuICAgICAgbmV4dCA9ICgoX25leHQpID0+IGFzeW5jICgpID0+IHtcbiAgICAgICAgdGhpcy5sb2cuaW5mbyhgUGx1Z2luICR7cGx1Z2luLm5hbWV9IGlzIG5vdyBoYW5kbGluZyBjbWQgJyR7Y21kfSdgKTtcbiAgICAgICAgY21kSGFuZGxlZEJ5W3BsdWdpbi5uYW1lXSA9IHRydWU7IC8vIGlmIHdlIG1ha2UgaXQgaGVyZSwgdGhpcyBwbHVnaW4gaGFzIGF0dGVtcHRlZCB0byBoYW5kbGUgY21kXG4gICAgICAgIC8vIGZpcnN0IGF0dGVtcHQgdG8gaGFuZGxlIHRoZSBjb21tYW5kIHZpYSBhIGNvbW1hbmQtc3BlY2lmaWMgaGFuZGxlciBvbiB0aGUgcGx1Z2luXG4gICAgICAgIGlmIChwbHVnaW5bY21kXSkge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBwbHVnaW5bY21kXShfbmV4dCwgZHJpdmVyLCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvdGhlcndpc2UsIGNhbGwgdGhlIGdlbmVyaWMgJ2hhbmRsZScgbWV0aG9kXG4gICAgICAgIHJldHVybiBhd2FpdCBwbHVnaW4uaGFuZGxlKF9uZXh0LCBkcml2ZXIsIGNtZCwgLi4uYXJncyk7XG4gICAgICB9KShuZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIGxvZ1BsdWdpbkhhbmRsZXJSZXBvcnQgKHBsdWdpbnMsIHtjbWQsIGNtZEhhbmRsZWRCeX0pIHtcbiAgICBpZiAoIXBsdWdpbnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYXQgdGhlIGVuZCBvZiB0aGUgZGF5LCB3ZSBoYXZlIGFuIG9iamVjdCByZXByZXNlbnRpbmcgd2hpY2ggcGx1Z2lucyBlbmRlZCB1cCBnZXR0aW5nXG4gICAgLy8gdGhlaXIgY29kZSBydW4gYXMgcGFydCBvZiBoYW5kbGluZyB0aGlzIGNvbW1hbmQuIEJlY2F1c2UgcGx1Z2lucyBjYW4gY2hvb3NlICpub3QqIHRvXG4gICAgLy8gcGFzcyBjb250cm9sIHRvIG90aGVyIHBsdWdpbnMgb3IgdG8gdGhlIGRlZmF1bHQgZHJpdmVyIGJlaGF2aW9yLCB0aGlzIGlzIGluZm9ybWF0aW9uXG4gICAgLy8gd2hpY2ggaXMgcHJvYmFibHkgdXNlZnVsIHRvIHRoZSB1c2VyIChlc3BlY2lhbGx5IGluIHNpdHVhdGlvbnMgd2hlcmUgcGx1Z2lucyBtaWdodCBub3RcbiAgICAvLyBpbnRlcmFjdCB3ZWxsIHRvZ2V0aGVyLCBhbmQgaXQgd291bGQgYmUgaGFyZCB0byBkZWJ1ZyBvdGhlcndpc2Ugd2l0aG91dCB0aGlzIGtpbmQgb2ZcbiAgICAvLyBtZXNzYWdlKS5cbiAgICBjb25zdCBkaWRIYW5kbGUgPSBPYmplY3Qua2V5cyhjbWRIYW5kbGVkQnkpLmZpbHRlcigoaykgPT4gY21kSGFuZGxlZEJ5W2tdKTtcbiAgICBjb25zdCBkaWRudEhhbmRsZSA9IE9iamVjdC5rZXlzKGNtZEhhbmRsZWRCeSkuZmlsdGVyKChrKSA9PiAhY21kSGFuZGxlZEJ5W2tdKTtcbiAgICBpZiAoZGlkbnRIYW5kbGUubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5sb2cuaW5mbyhgQ29tbWFuZCAnJHtjbWR9JyB3YXMgKm5vdCogaGFuZGxlZCBieSB0aGUgZm9sbG93aW5nIGJlaGF2aW91cnMgb3IgcGx1Z2lucywgZXZlbiBgICtcbiAgICAgICAgYHRob3VnaCB0aGV5IHdlcmUgcmVnaXN0ZXJlZCB0byBoYW5kbGUgaXQ6ICR7SlNPTi5zdHJpbmdpZnkoZGlkbnRIYW5kbGUpfS4gVGhlIGAgK1xuICAgICAgICBgY29tbWFuZCAqd2FzKiBoYW5kbGVkIGJ5IHRoZXNlOiAke0pTT04uc3RyaW5naWZ5KGRpZEhhbmRsZSl9LmApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVXcmFwcGVkQ29tbWFuZCAoe3dyYXBwZWRDbWQsIHByb3RvY29sfSkge1xuICAgIGxldCBjbWRSZXMsIGNtZEVyciwgcmVzID0ge307XG4gICAgdHJ5IHtcbiAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIGB3cmFwcGVkQ21kYCBkZWZpbmVzIGEgd2hvbGUgc2VxdWVuY2Ugb2YgcGx1Z2luIGhhbmRsZXJzLCBjdWxtaW5hdGluZyBpblxuICAgICAgLy8gb3VyIGRlZmF1bHQgaGFuZGxlci4gV2hhdGV2ZXIgaXQgcmV0dXJucyBpcyB3aGF0IHdlJ3JlIGdvaW5nIHRvIHdhbnQgdG8gc2VuZCBiYWNrIHRvIHRoZVxuICAgICAgLy8gdXNlci5cbiAgICAgIGNtZFJlcyA9IGF3YWl0IHdyYXBwZWRDbWQoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjbWRFcnIgPSBlO1xuICAgIH1cblxuICAgIC8vIFNhZGx5LCB3ZSBkb24ndCBrbm93IGV4YWN0bHkgd2hhdCBraW5kIG9mIG9iamVjdCB3aWxsIGJlIHJldHVybmVkLiBJdCB3aWxsIGVpdGhlciBiZSBhIGJhcmVcbiAgICAvLyBvYmplY3QsIG9yIGEgcHJvdG9jb2wtYXdhcmUgb2JqZWN0IHdpdGggcHJvdG9jb2wgYW5kIGVycm9yL3ZhbHVlIGtleXMuIFNvIHdlIG5lZWQgdG8gc25pZmZcbiAgICAvLyBpdCBhbmQgbWFrZSBzdXJlIHdlIGRvbid0IGRvdWJsZS13cmFwIGl0IGlmIGl0J3MgdGhlIGxhdHRlciBraW5kLlxuICAgIGlmIChfLmlzUGxhaW5PYmplY3QoY21kUmVzKSAmJiBfLmhhcyhjbWRSZXMsICdwcm90b2NvbCcpKSB7XG4gICAgICByZXMgPSBjbWRSZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy52YWx1ZSA9IGNtZFJlcztcbiAgICAgIHJlcy5lcnJvciA9IGNtZEVycjtcbiAgICAgIHJlcy5wcm90b2NvbCA9IHByb3RvY29sO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG5cbiAgcHJveHlBY3RpdmUgKHNlc3Npb25JZCkge1xuICAgIGNvbnN0IGRzdFNlc3Npb24gPSB0aGlzLnNlc3Npb25zW3Nlc3Npb25JZF07XG4gICAgcmV0dXJuIGRzdFNlc3Npb24gJiYgXy5pc0Z1bmN0aW9uKGRzdFNlc3Npb24ucHJveHlBY3RpdmUpICYmIGRzdFNlc3Npb24ucHJveHlBY3RpdmUoc2Vzc2lvbklkKTtcbiAgfVxuXG4gIGdldFByb3h5QXZvaWRMaXN0IChzZXNzaW9uSWQpIHtcbiAgICBjb25zdCBkc3RTZXNzaW9uID0gdGhpcy5zZXNzaW9uc1tzZXNzaW9uSWRdO1xuICAgIHJldHVybiBkc3RTZXNzaW9uID8gZHN0U2Vzc2lvbi5nZXRQcm94eUF2b2lkTGlzdCgpIDogW107XG4gIH1cblxuICBjYW5Qcm94eSAoc2Vzc2lvbklkKSB7XG4gICAgY29uc3QgZHN0U2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnNbc2Vzc2lvbklkXTtcbiAgICByZXR1cm4gZHN0U2Vzc2lvbiAmJiBkc3RTZXNzaW9uLmNhblByb3h5KHNlc3Npb25JZCk7XG4gIH1cbn1cblxuLy8gaGVscCBkZWNpZGUgd2hpY2ggY29tbWFuZHMgc2hvdWxkIGJlIHByb3hpZWQgdG8gc3ViLWRyaXZlcnMgYW5kIHdoaWNoXG4vLyBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGlzLCBvdXIgdW1icmVsbGEgZHJpdmVyXG5mdW5jdGlvbiBpc0FwcGl1bURyaXZlckNvbW1hbmQgKGNtZCkge1xuICByZXR1cm4gIWlzU2Vzc2lvbkNvbW1hbmQoY21kKSB8fCBjbWQgPT09ICdkZWxldGVTZXNzaW9uJztcbn1cblxuLyoqXG4gKiBUaHJvd24gd2hlbiBBcHBpdW0gdHJpZWQgdG8gcHJveHkgYSBjb21tYW5kIHVzaW5nIGEgZHJpdmVyJ3MgYHByb3h5Q29tbWFuZGAgbWV0aG9kIGJ1dCB0aGVcbiAqIG1ldGhvZCBkaWQgbm90IGV4aXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBOb0RyaXZlclByb3h5Q29tbWFuZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKipcbiAgICogQHR5cGUge1JlYWRvbmx5PHN0cmluZz59XG4gICAqL1xuICBjb2RlID0gJ0FQUElVTUVSUl9OT19EUklWRVJfUFJPWFlDT01NQU5EJztcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoYFRoZSBkZWZhdWx0IGJlaGF2aW9yIGZvciB0aGlzIGNvbW1hbmQgd2FzIHRvIHByb3h5LCBidXQgdGhlIGRyaXZlciBgICtcbiAgICAgICAgICBgZGlkIG5vdCBoYXZlIHRoZSAncHJveHlDb21tYW5kJyBtZXRob2QgZGVmaW5lZC4gVG8gZnVsbHkgc3VwcG9ydCBgICtcbiAgICAgICAgICBgcGx1Z2lucywgZHJpdmVycyBzaG91bGQgaGF2ZSAncHJveHlDb21tYW5kJyBzZXQgdG8gYSBqd3BQcm94eSBvYmplY3QncyBgICtcbiAgICAgICAgICBgJ2NvbW1hbmQoKScgbWV0aG9kLCBpbiBhZGRpdGlvbiB0byB0aGUgbm9ybWFsICdwcm94eVJlcVJlcydgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBBcHBpdW1Ecml2ZXIgfTtcbiJdfQ==