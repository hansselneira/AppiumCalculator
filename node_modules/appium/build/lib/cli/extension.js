"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runExtensionCommand = runExtensionCommand;

require("source-map-support/register");

var _driverCommand = _interopRequireDefault(require("./driver-command"));

var _pluginCommand = _interopRequireDefault(require("./plugin-command"));

var _constants = require("../constants");

var _utils = require("./utils");

async function runExtensionCommand(args, configObject) {
  let jsonResult = null;
  const {
    extensionType: type
  } = configObject;
  const extCmd = args[`${type}Command`];

  if (!extCmd) {
    throw new TypeError(`Cannot call ${type} command without a subcommand like 'install'`);
  }

  let {
    json,
    suppressOutput
  } = args;

  if (suppressOutput) {
    json = true;
  }

  const logFn = msg => (0, _utils.log)(json, msg);

  let config = configObject;
  config.log = logFn;
  const CommandClass = type === _constants.DRIVER_TYPE ? _driverCommand.default : _pluginCommand.default;
  const cmd = new CommandClass({
    config,
    json
  });

  try {
    jsonResult = await cmd.execute(args);
  } catch (err) {
    if (suppressOutput) {
      throw err;
    }

    (0, _utils.errAndQuit)(json, err);
  }

  if (json && !suppressOutput) {
    console.log(JSON.stringify(jsonResult, null, _utils.JSON_SPACES));
  }

  return jsonResult;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jbGkvZXh0ZW5zaW9uLmpzIl0sIm5hbWVzIjpbInJ1bkV4dGVuc2lvbkNvbW1hbmQiLCJhcmdzIiwiY29uZmlnT2JqZWN0IiwianNvblJlc3VsdCIsImV4dGVuc2lvblR5cGUiLCJ0eXBlIiwiZXh0Q21kIiwiVHlwZUVycm9yIiwianNvbiIsInN1cHByZXNzT3V0cHV0IiwibG9nRm4iLCJtc2ciLCJjb25maWciLCJsb2ciLCJDb21tYW5kQ2xhc3MiLCJEUklWRVJfVFlQRSIsIkRyaXZlckNvbW1hbmQiLCJQbHVnaW5Db21tYW5kIiwiY21kIiwiZXhlY3V0ZSIsImVyciIsImNvbnNvbGUiLCJKU09OIiwic3RyaW5naWZ5IiwiSlNPTl9TUEFDRVMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBV0EsZUFBZUEsbUJBQWYsQ0FBb0NDLElBQXBDLEVBQTBDQyxZQUExQyxFQUF3RDtBQUd0RCxNQUFJQyxVQUFVLEdBQUcsSUFBakI7QUFDQSxRQUFNO0FBQUNDLElBQUFBLGFBQWEsRUFBRUM7QUFBaEIsTUFBd0JILFlBQTlCO0FBQ0EsUUFBTUksTUFBTSxHQUFHTCxJQUFJLENBQUUsR0FBRUksSUFBSyxTQUFULENBQW5COztBQUNBLE1BQUksQ0FBQ0MsTUFBTCxFQUFhO0FBQ1gsVUFBTSxJQUFJQyxTQUFKLENBQWUsZUFBY0YsSUFBSyw4Q0FBbEMsQ0FBTjtBQUNEOztBQUNELE1BQUk7QUFBQ0csSUFBQUEsSUFBRDtBQUFPQyxJQUFBQTtBQUFQLE1BQXlCUixJQUE3Qjs7QUFDQSxNQUFJUSxjQUFKLEVBQW9CO0FBQ2xCRCxJQUFBQSxJQUFJLEdBQUcsSUFBUDtBQUNEOztBQUNELFFBQU1FLEtBQUssR0FBSUMsR0FBRCxJQUFTLGdCQUFJSCxJQUFKLEVBQVVHLEdBQVYsQ0FBdkI7O0FBQ0EsTUFBSUMsTUFBTSxHQUFHVixZQUFiO0FBQ0FVLEVBQUFBLE1BQU0sQ0FBQ0MsR0FBUCxHQUFhSCxLQUFiO0FBQ0EsUUFBTUksWUFBWSxHQUFHVCxJQUFJLEtBQUtVLHNCQUFULEdBQXVCQyxzQkFBdkIsR0FBdUNDLHNCQUE1RDtBQUNBLFFBQU1DLEdBQUcsR0FBRyxJQUFJSixZQUFKLENBQWlCO0FBQUNGLElBQUFBLE1BQUQ7QUFBU0osSUFBQUE7QUFBVCxHQUFqQixDQUFaOztBQUNBLE1BQUk7QUFDRkwsSUFBQUEsVUFBVSxHQUFHLE1BQU1lLEdBQUcsQ0FBQ0MsT0FBSixDQUFZbEIsSUFBWixDQUFuQjtBQUNELEdBRkQsQ0FFRSxPQUFPbUIsR0FBUCxFQUFZO0FBR1osUUFBSVgsY0FBSixFQUFvQjtBQUNsQixZQUFNVyxHQUFOO0FBQ0Q7O0FBQ0QsMkJBQVdaLElBQVgsRUFBaUJZLEdBQWpCO0FBQ0Q7O0FBRUQsTUFBSVosSUFBSSxJQUFJLENBQUNDLGNBQWIsRUFBNkI7QUFDM0JZLElBQUFBLE9BQU8sQ0FBQ1IsR0FBUixDQUFZUyxJQUFJLENBQUNDLFNBQUwsQ0FBZXBCLFVBQWYsRUFBMkIsSUFBM0IsRUFBaUNxQixrQkFBakMsQ0FBWjtBQUNEOztBQUVELFNBQU9yQixVQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5cbmltcG9ydCBEcml2ZXJDb21tYW5kIGZyb20gJy4vZHJpdmVyLWNvbW1hbmQnO1xuaW1wb3J0IFBsdWdpbkNvbW1hbmQgZnJvbSAnLi9wbHVnaW4tY29tbWFuZCc7XG5pbXBvcnQgeyBEUklWRVJfVFlQRSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBlcnJBbmRRdWl0LCBsb2csIEpTT05fU1BBQ0VTIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogUnVuIGEgc3ViY29tbWFuZCBvZiB0aGUgJ2FwcGl1bSBkcml2ZXInIHR5cGUuIEVhY2ggc3ViY29tbWFuZCBoYXMgaXRzIG93biBzZXQgb2YgYXJndW1lbnRzIHdoaWNoXG4gKiBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYSBKUyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBKUyBvYmplY3Qgd2hlcmUgdGhlIGtleSBpcyB0aGUgcGFyYW1ldGVyIG5hbWUgKGFzIGRlZmluZWQgaW5cbiAqIGRyaXZlci1wYXJzZXIuanMpXG4gKiBAdGVtcGxhdGUge0V4dGVuc2lvblR5cGV9IEV4dFR5cGVcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9leHRlbnNpb24vZXh0ZW5zaW9uLWNvbmZpZycpLkV4dGVuc2lvbkNvbmZpZzxFeHRUeXBlPn0gY29uZmlnT2JqZWN0IC0gRXh0ZW5zaW9uIGNvbmZpZyBvYmplY3RcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcnVuRXh0ZW5zaW9uQ29tbWFuZCAoYXJncywgY29uZmlnT2JqZWN0KSB7XG4gIC8vIFRPRE8gZHJpdmVyIGNvbmZpZyBmaWxlIHNob3VsZCBiZSBsb2NrZWQgd2hpbGUgYW55IG9mIHRoZXNlIGNvbW1hbmRzIGFyZVxuICAvLyBydW5uaW5nIHRvIHByZXZlbnQgd2VpcmQgc2l0dWF0aW9uc1xuICBsZXQganNvblJlc3VsdCA9IG51bGw7XG4gIGNvbnN0IHtleHRlbnNpb25UeXBlOiB0eXBlfSA9IGNvbmZpZ09iamVjdDtcbiAgY29uc3QgZXh0Q21kID0gYXJnc1tgJHt0eXBlfUNvbW1hbmRgXTtcbiAgaWYgKCFleHRDbWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3QgY2FsbCAke3R5cGV9IGNvbW1hbmQgd2l0aG91dCBhIHN1YmNvbW1hbmQgbGlrZSAnaW5zdGFsbCdgKTtcbiAgfVxuICBsZXQge2pzb24sIHN1cHByZXNzT3V0cHV0fSA9IGFyZ3M7XG4gIGlmIChzdXBwcmVzc091dHB1dCkge1xuICAgIGpzb24gPSB0cnVlO1xuICB9XG4gIGNvbnN0IGxvZ0ZuID0gKG1zZykgPT4gbG9nKGpzb24sIG1zZyk7XG4gIGxldCBjb25maWcgPSBjb25maWdPYmplY3Q7XG4gIGNvbmZpZy5sb2cgPSBsb2dGbjtcbiAgY29uc3QgQ29tbWFuZENsYXNzID0gdHlwZSA9PT0gRFJJVkVSX1RZUEUgPyBEcml2ZXJDb21tYW5kIDogUGx1Z2luQ29tbWFuZDtcbiAgY29uc3QgY21kID0gbmV3IENvbW1hbmRDbGFzcyh7Y29uZmlnLCBqc29ufSk7XG4gIHRyeSB7XG4gICAganNvblJlc3VsdCA9IGF3YWl0IGNtZC5leGVjdXRlKGFyZ3MpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBpbiB0aGUgc3VwcHJlc3Mgb3V0cHV0IGNhc2UsIHdlIGFyZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gaW50ZXJuYWxseSBhbmQgc2hvdWxkXG4gICAgLy8ganVzdCB0aHJvdyBpbnN0ZWFkIG9mIHByaW50aW5nIGFuIGVycm9yIGFuZCBlbmRpbmcgdGhlIHByb2Nlc3NcbiAgICBpZiAoc3VwcHJlc3NPdXRwdXQpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgZXJyQW5kUXVpdChqc29uLCBlcnIpO1xuICB9XG5cbiAgaWYgKGpzb24gJiYgIXN1cHByZXNzT3V0cHV0KSB7XG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoanNvblJlc3VsdCwgbnVsbCwgSlNPTl9TUEFDRVMpKTtcbiAgfVxuXG4gIHJldHVybiBqc29uUmVzdWx0O1xufVxuXG5leHBvcnQge1xuICBydW5FeHRlbnNpb25Db21tYW5kLFxufTtcbiJdfQ==